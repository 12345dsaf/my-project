/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 05.01.2025 09:44:41

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242688;
#else
constexpr int kTensorArenaSize = 241664;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[7] = { 18522, -33091, -28987, -13389, -31042, -33148, -13395, };
const TfArray<1, int> tensor_dimension2 = { 1, { 7 } };
const TfArray<7, float> quant2_scale = { 7, { 0.00032854339224286377, 0.00022867010557092726, 0.00024003391445148736, 0.00060542317805811763, 0.0002354634489165619, 0.00023952074116095901, 0.00055309111485257745, } };
const TfArray<7, int> quant2_zero = { 7, { 0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[7*1*1*32] = { 
  /* [0][0][][] */ -31,49,18,-19,9,-18,7,54,43,5,7,61,30,31,89,50,93,18,51,28,-37,-29,127,-28,11,5,-48,68,-59,-71,64,116, 
  /* [1][0][][] */ 22,-71,14,7,54,-72,43,-118,127,-37,-81,-89,-72,106,39,70,-49,43,59,-105,84,85,-80,17,-54,-2,91,23,-56,-24,-17,-40, 
  /* [2][0][][] */ -6,-90,121,104,39,-56,91,78,-96,101,-103,-9,32,-12,-12,-94,-5,-8,109,-114,-36,123,-127,3,5,-45,79,-22,-114,43,43,-3, 
  /* [3][0][][] */ 44,7,-7,4,2,-36,28,-14,-50,17,19,-40,-15,-11,-38,-1,-26,45,-24,39,24,14,9,8,-56,-34,-21,-13,-127,-22,29,-29, 
  /* [4][0][][] */ -37,65,-20,126,124,-109,-36,-48,-4,89,96,-81,-72,-22,-74,-82,-51,51,122,23,-108,71,-127,26,-45,64,-61,24,-127,126,-38,-108, 
  /* [5][0][][] */ 61,-76,-12,83,-41,100,109,81,-111,-71,115,-38,-75,12,-55,-114,-107,-11,11,-65,74,83,-123,33,-4,-80,127,103,-17,-43,-64,-47, 
  /* [6][0][][] */ 53,-30,-4,25,-27,-30,-17,6,23,-46,11,-57,-7,6,-27,42,11,-5,28,-37,-53,53,-6,40,10,-82,-41,-33,-127,3,-7,-3, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 7,1,1,32 } };
const TfArray<7, float> quant3_scale = { 7, { 0.0042924778535962105, 0.0029876157641410828, 0.0031360858120024204, 0.0079099619761109352, 0.0030763719696551561, 0.0031293812207877636, 0.0072262343019247055, } };
const TfArray<7, int> quant3_zero = { 7, { 0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 278, 323, -134, 117, 281, -577, -145, 67, 178, 156, 78, 340, 549, 156, 15, 224, 107, 577, -552, 192, 35, 424, 855, 297, -194, -76, -451, -603, -45, 141, -414, 620, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.0329981604591012e-05, 4.8879206588026136e-05, 4.1404404328204691e-05, 6.5527958213351667e-05, 4.567665746435523e-05, 4.562487083603628e-05, 5.1177328714402393e-05, 4.9706752179190516e-05, 4.7953992179827765e-05, 4.77325011161156e-05, 5.5003052693791687e-05, 0.00010363812907598913, 5.1948522013844922e-05, 6.0606736951740459e-05, 4.961026570526883e-05, 5.5011565564200282e-05, 6.1192738940007985e-05, 6.4646017563063651e-05, 4.3637548515107483e-05, 5.0088550779037178e-05, 4.9995691369986162e-05, 5.504364162334241e-05, 5.641328971250914e-05, 7.566077692899853e-05, 8.1106838479172438e-05, 5.0316150009166449e-05, 5.0552996981423348e-05, 4.6347544412128627e-05, 0.00015315129712689668, 4.8204445192823187e-05, 4.2593590478645638e-05, 6.2065315432846546e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -30,-31,99,-8,85,-35,-71,-79,45,-62,-78,-31,34,21,-20,44,-45,-16,-65,20,-41,-95,4,88,-102,42,71,-49,107,76,-6,-46,92,-34,-89,72,-94,-46,-98,36,79,-73,-80,94,59,-70,107,-7,37,-32,-44,109,-93,-28,-46,121,-12,68,104,-95,-66,57,-23,59,57,33,63,93,127,89,43,-108,94,-66,61,74,-40,3,-41,29,64,11,102,26,-38,-46,-63,122,36,115,12,-79,11,50,76,21, 
  /* [1][0][][] */ -60,29,-52,-4,-45,77,39,11,72,-93,-87,127,34,-25,26,58,106,-40,48,68,-40,5,43,35,22,6,-31,111,12,-54,89,-60,61,85,9,18,54,49,14,-46,-71,-3,-20,-73,-49,25,-46,-46,-22,-93,109,37,22,79,-76,-66,32,98,41,85,-72,83,-41,-72,-67,27,78,45,74,25,38,-14,-86,82,-50,55,62,-29,-29,88,-72,65,-50,-127,29,116,-57,-80,66,74,92,22,50,48,-16,2, 
  /* [2][0][][] */ 73,30,-62,111,-30,-71,90,106,-118,62,-40,122,65,-16,83,-113,-65,-33,29,60,-111,-19,109,15,-46,100,108,-2,-64,103,85,47,-62,-38,-117,-127,-84,94,100,-32,-119,-86,2,-5,-81,121,-23,-78,111,85,60,-88,-53,27,21,23,-110,74,-28,-8,-27,82,-60,67,52,42,45,89,-89,46,-28,-81,36,-74,16,27,-69,-32,4,-16,33,-79,-25,-39,-2,-101,-20,-45,82,117,-34,-21,-49,-80,-35,-92, 
  /* [3][0][][] */ 52,-4,31,-23,-43,8,-64,8,30,-9,53,2,82,65,51,17,74,73,-54,4,85,-58,-41,-73,-25,-61,-36,67,42,-62,63,8,-40,-26,-44,-25,-55,-7,6,51,-7,-62,-64,6,45,28,-29,-57,51,-50,30,13,51,3,73,-65,-127,-88,-60,-33,-59,10,5,51,22,-9,-33,-11,-4,-50,2,63,38,-78,35,-26,38,63,75,-75,-44,-72,29,74,28,45,-21,-63,-46,49,10,-56,59,-70,-51,32, 
  /* [4][0][][] */ 51,102,10,47,-10,-60,36,29,73,42,0,75,33,-21,-12,-39,-8,1,-34,-41,101,-78,96,28,-5,-8,74,-31,-22,-14,-51,-37,55,116,-14,-79,-28,-7,-127,61,-45,-55,-53,-77,23,107,27,61,25,-7,-31,-68,-37,52,-89,-12,24,-61,6,47,7,-64,4,-73,-58,61,13,-27,31,-72,-69,-75,-29,10,106,68,76,-9,6,-57,27,-31,-93,-15,14,76,105,9,-90,-55,56,51,40,84,-127,20, 
  /* [5][0][][] */ 113,-99,55,79,35,-113,9,68,89,-115,-8,-93,21,80,20,20,27,34,-87,65,12,31,1,-40,-98,-72,-37,-127,19,7,3,-83,-50,4,-77,19,-120,-42,38,12,-96,-54,20,83,-43,13,33,-62,-116,46,30,29,19,22,17,-37,99,46,-82,-44,29,-81,26,-81,-35,81,-46,21,57,-17,87,-68,-56,77,-39,-87,-3,-62,-4,80,81,38,6,98,-92,72,-17,29,41,-109,73,74,-21,-1,55,-91, 
  /* [6][0][][] */ 20,-24,112,68,-67,-50,-5,63,-20,-64,10,-97,104,44,93,-96,36,9,-19,127,-68,-108,92,39,-46,-51,1,-35,-11,-26,46,-53,-44,-99,-59,-64,2,35,-117,79,71,51,17,-15,-89,101,-80,-42,-56,47,-16,-44,45,-46,91,-16,-1,-13,-36,93,-91,16,72,-35,-15,62,84,-20,119,17,-86,0,46,-43,-81,-23,-20,-91,-40,-41,39,-13,26,3,-56,-70,-27,-68,69,83,106,62,-43,-30,81,9, 
  /* [7][0][][] */ 101,48,-24,-15,-83,119,-5,-4,94,9,-86,11,87,-90,43,61,49,11,-15,110,48,42,-12,93,-93,90,43,58,-71,102,-23,-6,25,-4,76,59,-88,66,-2,-20,81,-71,67,56,45,-14,78,-100,40,-55,-99,-65,-37,27,21,35,90,-127,41,-72,-10,3,28,-94,-116,-52,67,38,-113,14,56,69,69,5,2,60,-74,48,-81,9,75,-43,-17,-67,72,38,-107,69,74,5,86,45,-77,-10,3,-73, 
  /* [8][0][][] */ 8,36,-42,-69,71,11,-66,6,16,-19,38,60,-40,-27,-73,-57,-55,81,-51,-47,17,-14,81,104,-64,60,37,73,-64,-44,-79,87,77,-19,38,6,109,-2,-12,60,65,103,-94,-104,-10,-30,-31,110,16,-112,-79,-44,-33,-11,-43,-115,83,99,-127,111,95,53,50,97,-84,-49,-16,85,-71,38,27,18,52,43,43,23,-55,107,72,83,32,70,-102,-84,23,40,60,-46,33,-50,-103,43,-60,-106,-77,40, 
  /* [9][0][][] */ -12,9,101,40,57,-100,-42,-105,39,-12,-10,64,-29,-58,-80,-33,11,1,-92,-61,17,95,-101,-83,78,4,-13,25,-9,-127,-83,75,27,-3,22,-6,-71,23,-48,-50,58,-68,57,-67,86,21,-79,61,38,-21,-88,-81,70,-72,-47,109,82,-47,-13,-20,-61,95,53,-92,-94,8,96,34,-61,88,95,-90,1,94,-71,-90,-88,-109,-35,88,29,31,107,18,-38,-93,27,-8,106,40,-28,51,108,-4,64,-30, 
  /* [10][0][][] */ -79,57,69,-64,-17,63,91,-3,39,42,23,-59,127,51,-26,11,-26,69,-92,-39,-11,25,44,-46,30,30,-85,-91,-48,58,-84,-29,52,82,105,45,-38,9,-29,34,-26,89,-82,-33,-86,-49,-5,-56,-14,-46,58,20,29,29,-41,-37,-101,-9,11,-35,-2,35,109,29,114,-53,-71,-14,10,2,-49,-61,74,48,-70,83,4,50,55,13,64,-17,43,73,-79,57,74,-7,33,14,10,-23,-56,-51,-47,-26, 
  /* [11][0][][] */ 63,17,-4,44,54,97,18,35,43,75,-30,58,21,-38,18,-33,-4,-51,46,0,10,44,19,-25,-43,-59,-18,45,20,-24,8,-1,-26,-20,35,36,-4,28,29,-34,-11,44,-31,27,-17,-30,-37,-32,25,31,127,32,-20,-9,0,4,44,-25,-7,-24,-14,52,37,13,106,31,-22,6,17,34,5,-34,9,57,-27,27,-43,35,-22,48,-52,-2,-25,-27,18,-10,-4,-22,-31,-6,-14,-29,-27,16,6,-14, 
  /* [12][0][][] */ 26,52,-56,42,51,73,-19,48,-55,79,-12,38,-97,13,48,-56,-70,-26,-82,-85,20,21,26,110,-85,-61,77,-90,46,1,-30,84,-65,-47,13,1,16,-66,41,16,103,42,-87,-25,-11,-83,-25,108,-46,-127,-83,94,17,9,-97,68,18,-34,40,62,41,126,-65,37,87,17,-27,86,-8,84,63,63,56,90,-6,-7,-78,56,-100,-67,-68,80,23,-4,-32,29,45,81,-72,-100,49,44,77,23,9,41, 
  /* [13][0][][] */ 85,-30,81,69,76,62,55,55,56,-127,11,-41,55,62,49,-29,-83,-46,-55,-43,43,-18,90,-40,-15,26,10,27,-65,-111,74,31,38,85,-27,41,-59,-19,-16,55,-51,68,-35,8,-25,30,-11,-16,37,34,-15,-109,-54,23,59,-57,-13,14,-65,-42,-19,96,-49,28,-66,-46,-63,69,-23,-11,65,18,-74,32,-37,-21,-77,50,60,-45,42,-59,66,33,-50,-69,68,80,-11,-48,-82,50,96,-65,15,-3, 
  /* [14][0][][] */ -43,-76,65,85,87,23,-8,-58,-39,15,61,92,-24,-91,-87,-42,-34,-60,16,-8,-46,35,2,63,-76,-73,-40,23,-102,-110,-87,42,79,-26,-28,7,93,90,84,-92,6,-107,53,87,52,-100,88,-75,89,32,40,39,101,-4,-38,0,-8,18,46,103,-29,-64,-15,46,-55,1,76,-83,-52,-48,-49,73,2,66,53,-55,43,-83,51,42,40,-44,-107,-16,-101,-59,-84,126,97,1,99,-37,56,127,-9,81, 
  /* [15][0][][] */ -5,-15,-14,75,71,-85,56,-79,48,-22,-52,-1,69,9,-60,-91,78,11,-93,-16,33,27,63,98,73,48,36,82,13,22,45,-108,5,9,-53,-20,-47,83,59,-50,9,99,-34,-18,22,-68,-51,-57,-7,-79,-16,-4,-84,-86,-45,-11,64,20,-55,92,-41,-39,8,79,-36,70,-47,7,-51,5,36,-38,2,-16,74,-76,-2,54,85,79,-68,39,-88,-61,-95,-19,-79,19,67,41,-67,-42,47,54,-127,75, 
  /* [16][0][][] */ -58,-25,62,-35,42,127,-29,39,29,58,-89,89,-37,-51,-29,-50,96,43,27,32,59,79,-27,69,-26,25,-50,40,-85,-15,11,-12,-84,31,82,9,-3,20,13,-81,10,-38,35,68,39,44,63,-5,-62,-88,4,76,-18,56,38,22,57,31,44,7,68,126,-2,28,26,-6,-19,25,2,44,-2,-17,-3,65,53,55,-49,90,-89,-25,-11,-77,33,-26,-1,76,43,-17,48,-12,-34,64,30,5,-79,-13, 
  /* [17][0][][] */ 17,-48,41,35,-17,-108,-38,-40,41,-43,71,43,49,59,-68,50,47,50,89,99,-53,-3,31,-33,30,59,-42,41,102,-3,-5,81,-19,5,-3,52,-7,79,-84,-3,-53,-21,16,8,11,28,57,-56,72,119,-55,35,17,79,80,-59,-89,104,-72,-39,4,-54,98,68,-12,-28,44,-57,-9,42,88,16,25,-74,-8,67,127,-18,46,-22,41,-18,-48,-45,-53,50,82,3,40,70,-21,-64,-1,67,18,59, 
  /* [18][0][][] */ -100,83,92,-75,-13,-107,-111,-4,-15,62,-116,-51,-43,18,45,-65,10,-36,52,-23,85,-58,6,-88,24,-103,-30,95,23,34,-14,38,31,-40,-105,-119,-45,22,-38,54,-52,-16,-54,-22,-125,2,16,-15,2,-24,61,28,-114,-17,-4,71,-47,24,-19,-127,68,97,11,23,-68,-126,-43,82,67,-78,-77,92,-106,-46,-98,-115,52,40,-13,-84,-64,-19,-39,-76,87,-46,55,64,-118,-82,-63,103,73,-55,46,-20, 
  /* [19][0][][] */ 6,57,69,26,61,-63,67,102,95,3,25,10,-69,49,-44,54,74,-86,110,83,-13,73,-31,17,64,-89,17,-38,-84,-104,-42,65,77,-48,38,64,31,-58,-32,-97,38,-88,-43,23,-59,36,63,-68,-32,35,-42,56,-36,51,-4,-18,54,118,26,-9,47,-65,68,66,22,3,-27,-20,-26,90,62,-47,-71,-85,-12,-59,-24,-77,8,127,57,-103,-31,68,-66,-7,20,2,90,28,-18,67,-18,103,49,9, 
  /* [20][0][][] */ -17,79,78,87,-70,106,11,68,17,17,-74,-9,9,68,33,-59,-35,-26,-64,3,10,-38,-56,-63,92,-66,-88,67,20,65,-28,113,111,44,-5,77,47,-33,-34,-91,-81,-21,-71,-85,-20,-50,-72,88,62,-94,-72,25,54,109,42,-1,127,62,82,82,72,-14,-51,0,5,-58,-40,25,-47,-31,-27,74,-67,-61,34,32,122,72,95,99,74,2,57,-8,53,100,-11,60,9,69,40,98,12,45,-6,30, 
  /* [21][0][][] */ 92,64,69,-79,91,-114,72,3,1,-84,-38,20,28,52,-28,-57,-79,-6,2,-7,101,-36,60,-66,48,-31,1,56,29,22,16,-8,19,29,-100,-88,89,99,-127,1,15,16,29,-3,-62,-38,-45,79,6,-46,-1,81,14,48,-50,40,-95,40,-32,100,61,-68,45,5,54,45,-19,-31,-36,-6,20,75,54,-1,64,60,-59,-27,67,61,33,101,43,-20,37,-62,67,-40,-68,85,87,-78,-17,-71,78,-15, 
  /* [22][0][][] */ 37,-27,-42,-49,81,99,105,97,-63,92,-44,-5,127,-86,-66,-48,65,60,-66,-7,68,-28,40,72,78,-15,-84,110,-46,-39,-53,-90,47,40,126,21,40,-9,36,-85,11,3,6,103,47,-91,70,4,-52,34,35,-8,8,-80,-31,22,66,-34,-2,-4,83,-25,-56,-89,-32,30,-63,-39,100,89,21,-3,-66,5,57,-39,16,-11,64,75,97,-90,-64,-101,78,100,70,-20,-32,28,-26,33,13,29,-42,64, 
  /* [23][0][][] */ 39,-50,5,24,64,-127,13,-76,35,-55,62,29,21,-42,22,-19,47,-7,-87,65,70,-45,59,-19,-8,16,62,-1,46,34,52,-9,-19,38,-3,15,47,16,-90,19,-43,7,11,-57,-28,-34,80,20,59,-82,-43,-16,17,-30,-8,71,-101,-11,52,26,-45,-79,-10,0,26,36,-61,-52,67,-16,34,-32,15,-8,-10,-57,44,-18,64,60,-18,-21,35,-37,64,7,73,10,-39,42,55,4,74,-58,5,44, 
  /* [24][0][][] */ -18,-26,-55,-7,-29,43,-39,-27,44,74,43,29,127,28,-19,-73,-53,16,44,-12,62,-47,-37,-17,15,-15,39,37,56,40,4,-21,36,8,77,28,-38,-45,89,-13,-40,-48,58,1,15,-19,22,42,-32,-21,70,31,62,46,54,-25,43,46,9,-11,65,-2,32,58,-6,49,-31,-40,-57,32,-27,0,-24,32,51,50,56,-48,-57,-52,-41,-52,-15,-51,-1,28,-14,-56,26,-57,-5,-13,-3,43,-49,25, 
  /* [25][0][][] */ -83,-37,-66,-16,60,-92,-96,39,30,-118,-39,9,55,-2,-127,-20,-59,48,48,-102,45,75,-7,-54,9,-76,-104,38,57,-88,24,63,79,-91,45,72,85,-84,-23,-12,-87,69,-82,-6,68,27,34,25,-90,62,-60,-13,47,-16,-74,6,-28,57,-88,70,79,34,18,29,-37,54,-13,23,-100,10,-19,-126,23,-109,48,24,54,65,10,41,40,24,-44,46,-72,-49,-84,-100,-13,-40,104,18,-127,-59,-46,-53, 
  /* [26][0][][] */ 53,-89,-9,-5,-78,-1,-24,5,-112,-127,84,40,-29,-49,-2,-21,86,16,-76,-58,-3,48,78,0,52,42,7,55,1,26,-79,1,-10,-56,-92,-61,-55,59,-61,90,-102,87,35,24,-66,64,-54,74,-18,16,21,75,13,-46,-12,-98,118,27,47,14,2,-65,44,1,78,-25,-58,55,-83,69,80,88,49,-69,-97,13,48,-99,-89,-19,-32,78,52,-51,60,0,-51,2,-86,82,-3,50,-44,96,31,89, 
  /* [27][0][][] */ 8,2,-75,-98,-112,-70,-78,-15,39,101,23,-100,-36,41,66,-33,47,-26,44,-86,-98,-3,-41,-34,-99,31,-110,-9,41,15,-36,-9,51,54,-95,-81,-92,-70,-102,69,-97,7,21,8,82,14,54,85,73,43,46,-74,-83,-87,-16,-39,88,-35,-118,-88,-61,-61,-45,47,28,-53,-119,83,34,13,-127,-3,39,-50,-19,-96,28,-75,66,92,69,-36,95,-57,-77,-86,-43,20,-55,-16,-67,-43,41,10,71,52, 
  /* [28][0][][] */ 19,0,20,13,-20,127,-30,-9,-2,-1,14,64,13,-30,-1,35,36,27,-25,22,-9,7,-30,-15,-25,19,-30,-12,-21,-8,-7,-5,-30,0,24,24,13,-33,14,0,30,12,-33,22,-33,-8,3,9,1,-14,-3,-7,23,1,15,8,71,0,30,22,-4,3,-14,0,32,21,-9,15,-17,7,-9,-11,16,9,8,-27,-27,-13,-30,17,-25,-33,26,-16,14,-23,16,-22,-29,-24,-6,-14,-12,87,-30,-23, 
  /* [29][0][][] */ 51,37,46,-47,-76,-19,-92,-8,94,-45,-72,-53,111,-83,-39,-28,-83,97,40,-104,-57,-22,54,13,-40,9,-23,-28,-80,-65,96,-5,28,2,-82,-69,-4,98,-7,95,55,94,-35,79,-7,96,-37,-19,14,1,50,-72,74,-92,99,30,-116,58,-36,109,-81,75,-61,-59,-88,-49,55,77,62,-85,35,-61,127,61,54,24,91,-49,-18,16,5,-61,4,-74,63,116,50,76,-17,104,56,61,-80,-3,-13,55, 
  /* [30][0][][] */ 17,-79,-71,27,-99,24,-78,-25,107,-24,-14,-45,-101,10,41,9,-13,28,93,-108,36,-114,-122,0,-118,14,-76,116,-13,-109,-98,-2,-84,-81,-123,-64,10,-31,-13,18,73,-88,-26,83,87,-53,86,46,-74,75,17,-109,95,-58,-22,90,-83,-56,-82,-56,-110,-10,-79,-28,-111,-101,-104,86,-65,99,47,-40,-90,93,31,-91,-60,-80,-85,-67,21,26,-106,-25,-118,16,-111,101,-42,-127,74,54,-38,-8,5,-76, 
  /* [31][0][][] */ 45,-50,32,67,46,91,-32,-30,-19,47,-48,-52,116,-91,-17,80,-11,-58,25,47,54,47,-6,106,30,-93,25,30,-46,-48,27,77,11,20,-50,10,96,-21,27,-90,62,-40,6,52,15,-41,-25,33,43,27,127,-18,-62,-32,-47,27,-38,48,11,89,-35,41,51,-55,80,88,-18,-73,64,-40,-56,8,-74,-50,41,16,-24,-5,37,79,-49,-42,51,44,44,79,-63,24,44,-31,-53,-33,1,103,-1,44, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0021390242036432028, 0.0020773662254214287, 0.0017596872057765722, 0.0027849383186548948, 0.0019412579713389277, 0.0019390570232644677, 0.0021750363521277905, 0.0021125369239598513, 0.0020380446221679449, 0.002028631279245019, 0.0023376296740025282, 0.0044046202674508095, 0.0022078121546655893, 0.0025757863186299801, 0.0021084363106638193, 0.0023379914928227663, 0.0026006912812590599, 0.0027474556118249893, 0.0018545958446338773, 0.0021287633571773767, 0.0021248168777674437, 0.0023393547162413597, 0.0023975647054612637, 0.0032155830413103104, 0.0034470406826585531, 0.0021384363062679768, 0.0021485022734850645, 0.0019697705283761024, 0.0065089301206171513, 0.0020486889407038689, 0.0018102275207638741, 0.0026377758476883173, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -1637, 3132, 8038, 1787, -2551, -3459, 13665, 2179, 2710, -1353, 12633, -364, -5539, 2674, 12304, 4549, 14573, 6337, -3365, -3877, 4044, 21362, 18418, 19255, 881, 998, 5636, 3103, 1945, -3809, 6625, -3433, -220, 4624, 164, 627, 9834, 6406, -2323, 4339, 6011, 4020, 4346, 12280, 4505, 5229, 1578, 6957, 4472, -4472, -5279, 198, -434, -1536, 1864, 3, 457, -631, -4239, 10180, -1032, 1604, -1529, -2168, -3171, 9827, 16330, 1464, -1814, 817, 1582, 1760, 1744, -1176, 356, 8516, -369, 19872, 13699, -606, 6151, 1927, -566, 1070, 13309, 7959, 3052, 1177, 4099, 3893, -346, -11818, 750, -1605, -1678, -1986, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00037984841037541628, 0.00050190044566988945, 0.00029762895428575575, 0.00049007177585735917, 0.00040731963235884905, 0.00039317080518230796, 0.00024334713816642761, 0.00032611022470518947, 0.00020529245375655591, 0.00042377531644888222, 0.00015344721032306552, 0.00022749020718038082, 0.00044080783845856786, 0.0010581845417618752, 0.00024921761360019445, 0.00024290602596011013, 0.00012473072274588048, 0.00022419971355702728, 0.00057434040354564786, 0.00043841119622811675, 0.00015036830154713243, 0.00012518373841885477, 0.00016694577061571181, 8.6839267169125378e-05, 0.00022046091908123344, 0.00045712894643656909, 0.00052885327022522688, 0.00036062643630430102, 0.00025715187075547874, 0.0005192042444832623, 0.0002212466933997348, 0.00022819325386080891, 0.00024056078109424561, 0.00024972078972496092, 0.00043499007006175816, 0.00036822012043558061, 0.00019818090368062258, 0.00016874939319677651, 0.00026278916629962623, 0.00040481766336597502, 0.00021216862660367042, 0.00064162816852331161, 0.00033937350963242352, 0.00018571026157587767, 0.00042426303843967617, 0.00018864152661990374, 0.00031627176213078201, 0.00030896117095835507, 0.00030505491304211318, 0.00029085419373586774, 0.00029339719912968576, 0.00022307191102299839, 0.0005030827596783638, 0.00022969226120039821, 0.0003987683157902211, 0.00032351032132282853, 0.00049728504382073879, 0.00047997449291869998, 0.00035922188544645905, 0.00018238686607219279, 0.00076121999882161617, 0.00042379708611406386, 0.00021666892280336469, 0.00036736833862960339, 0.00057909241877496243, 0.00018984402413479984, 0.00013159900845494121, 0.00022731519129592925, 0.00064705836120992899, 0.00043912086402997375, 0.00021744481637142599, 0.00027392705669626594, 0.00077621429227292538, 0.00039138420834206045, 0.00039146386552602053, 0.00025182051467709243, 0.00037385302130132914, 9.4610120868310332e-05, 0.00013387112994678319, 0.00027727600536309183, 0.00023239296569954604, 0.00016722152940928936, 0.00022322131553664804, 0.00018759370141196996, 0.00013590080197900534, 0.00029818189796060324, 0.00076724571408703923, 0.00016381171008106321, 0.00016802622121758759, 0.00052193575538694859, 0.00028753929655067623, 0.00017321109771728516, 0.0002892388729378581, 0.00061414396623149514, 0.00038926923298276961, 0.00019818749569822103, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -35,121,-24,-127,-49,-21,-41,-86,2,-7,-6,76,59,-39,-9,62, 
  /* [1][0][][] */ -16,27,-69,0,-59,-27,16,-62,37,47,-60,22,20,22,35,-127, 
  /* [2][0][][] */ -14,21,-62,39,34,32,-39,-84,127,-73,-51,-95,-21,89,-40,2, 
  /* [3][0][][] */ 21,-21,6,-99,-9,-6,-42,-11,127,-13,43,33,9,40,50,105, 
  /* [4][0][][] */ -56,23,33,43,-11,18,-1,59,25,-12,32,9,-127,-18,-13,-34, 
  /* [5][0][][] */ 12,25,108,20,5,58,-38,97,-5,79,-10,-12,14,-56,-127,-2, 
  /* [6][0][][] */ 18,-53,96,-127,20,8,-49,66,-27,-77,56,-23,-38,93,-7,84, 
  /* [7][0][][] */ 15,84,-29,-65,74,4,8,-43,127,94,-1,25,0,-34,54,35, 
  /* [8][0][][] */ 31,-104,12,-68,14,-95,67,-98,40,127,101,-16,7,126,76,56, 
  /* [9][0][][] */ 10,-18,-9,114,36,-28,35,-70,-62,127,24,-28,-14,-84,8,9, 
  /* [10][0][][] */ -47,50,-58,-127,-19,-18,-6,50,66,-30,6,-104,-41,-57,37,20, 
  /* [11][0][][] */ -8,18,57,-13,116,-29,72,-59,-77,35,12,34,16,127,-81,-26, 
  /* [12][0][][] */ 67,-49,-127,-25,97,-17,-29,64,49,34,-62,-74,-73,107,2,-4, 
  /* [13][0][][] */ -28,11,-37,13,1,-127,-5,31,4,-23,-10,-16,12,-18,28,18, 
  /* [14][0][][] */ 14,-22,63,-44,80,16,-127,-106,-29,-62,20,0,23,-53,-28,-9, 
  /* [15][0][][] */ -30,6,-7,-62,-8,5,127,52,-40,42,70,-20,13,47,39,5, 
  /* [16][0][][] */ 22,38,127,75,8,59,75,53,-39,35,-53,-2,2,19,-66,-108, 
  /* [17][0][][] */ -38,-94,-2,20,-73,-14,-50,29,-127,-33,13,-55,-7,43,45,-39, 
  /* [18][0][][] */ -15,30,-5,46,47,27,59,-21,65,11,-25,-57,41,127,52,-7, 
  /* [19][0][][] */ -30,-18,42,55,105,34,-75,-27,-48,-52,-40,-127,-31,-23,-2,-70, 
  /* [20][0][][] */ 95,-11,-47,-53,1,-127,8,7,-59,34,-122,-18,39,-1,-10,29, 
  /* [21][0][][] */ 79,-38,62,13,-14,-13,-13,79,28,22,96,127,-7,38,-12,30, 
  /* [22][0][][] */ -69,75,-39,127,-59,1,88,56,-2,10,-30,5,-10,17,45,11, 
  /* [23][0][][] */ 89,-42,127,-69,47,-15,-47,43,37,75,51,78,-38,-13,-103,6, 
  /* [24][0][][] */ -127,50,19,-11,-3,126,12,-25,-4,10,81,-18,-74,22,56,-40, 
  /* [25][0][][] */ 34,18,21,23,14,-1,54,-52,-5,-127,-4,-3,-33,-19,15,24, 
  /* [26][0][][] */ -24,-11,-15,17,-57,-19,-39,-51,-103,-50,5,-21,-9,127,-1,53, 
  /* [27][0][][] */ -18,46,14,59,41,-29,-24,-28,57,12,-23,-2,5,127,0,17, 
  /* [28][0][][] */ 7,58,42,56,127,3,28,19,-69,-46,-71,-80,45,59,81,-40, 
  /* [29][0][][] */ 12,-14,-3,16,21,-1,0,19,-47,-20,-15,-127,17,-8,-7,-1, 
  /* [30][0][][] */ -21,84,-58,61,-26,-14,60,-127,-64,28,-22,-11,75,35,67,94, 
  /* [31][0][][] */ -68,-17,-27,-105,-33,8,-35,-121,59,70,6,-127,-34,-34,48,5, 
  /* [32][0][][] */ -127,-57,9,66,37,54,-27,14,10,-22,-95,47,62,2,47,63, 
  /* [33][0][][] */ -13,-41,-26,-15,-95,-17,-58,20,53,21,16,-54,21,-108,127,47, 
  /* [34][0][][] */ 37,8,57,12,28,29,-34,92,-81,-37,77,24,22,-20,-20,127, 
  /* [35][0][][] */ -21,24,-50,18,-8,-26,21,-118,85,95,-71,7,-10,0,67,-127, 
  /* [36][0][][] */ -23,57,37,103,9,-5,127,47,2,60,-29,5,-28,1,8,-37, 
  /* [37][0][][] */ -14,24,4,-99,8,-5,-34,-70,-127,-71,-12,-48,13,-127,51,-44, 
  /* [38][0][][] */ 38,78,9,-47,127,-8,24,-22,115,107,-6,9,-12,-28,21,1, 
  /* [39][0][][] */ -39,69,-16,-127,-30,-8,-36,33,41,-77,-39,-55,14,64,40,26, 
  /* [40][0][][] */ 64,-66,66,-83,7,-3,-3,4,-127,21,1,18,-15,-109,45,-63, 
  /* [41][0][][] */ -28,-5,-19,5,-15,-28,-4,14,-2,28,-36,5,-127,16,16,32, 
  /* [42][0][][] */ 127,65,-36,-29,-31,-45,-13,-80,-12,8,88,-30,-44,46,79,-92, 
  /* [43][0][][] */ 29,50,-37,-7,92,10,111,-34,24,86,-22,22,55,-101,-127,-45, 
  /* [44][0][][] */ 11,-47,44,-68,87,8,-69,-127,-34,6,25,40,-16,-28,100,-85, 
  /* [45][0][][] */ -47,84,-127,-18,40,-75,50,-63,12,21,17,-102,43,6,46,-29, 
  /* [46][0][][] */ 26,-6,6,-86,-10,22,25,-18,-121,-14,-1,9,-15,-127,67,-31, 
  /* [47][0][][] */ 7,55,26,-2,125,-21,-37,16,-44,54,3,31,-9,-2,127,-25, 
  /* [48][0][][] */ -126,-53,-23,27,55,21,26,-27,-8,-42,-127,-3,70,19,92,36, 
  /* [49][0][][] */ 58,-35,84,96,126,-12,60,-11,-103,-51,-46,-108,21,127,15,-109, 
  /* [50][0][][] */ 30,-27,-58,-1,39,-127,-26,6,-6,7,-5,7,48,-4,21,19, 
  /* [51][0][][] */ 10,4,43,19,32,9,-2,7,-88,69,15,-111,12,-127,-13,81, 
  /* [52][0][][] */ 22,50,17,30,30,28,54,47,57,80,-24,-44,30,127,17,1, 
  /* [53][0][][] */ -5,-47,-8,-12,-93,28,-62,-12,65,24,17,-81,37,-109,127,-4, 
  /* [54][0][][] */ 37,-1,-41,24,127,76,-97,-42,-67,-8,-46,-108,4,-22,-20,-40, 
  /* [55][0][][] */ 84,-38,33,-2,70,-18,-61,-127,-58,-93,-70,26,10,-30,-3,8, 
  /* [56][0][][] */ -45,15,14,-11,-23,-29,-118,67,-10,127,-6,-2,23,16,-7,-8, 
  /* [57][0][][] */ -19,5,-39,-21,-45,-36,109,41,5,35,0,-3,16,22,127,-18, 
  /* [58][0][][] */ 47,-5,-127,10,72,73,-33,33,-94,-46,-3,-13,-34,43,24,7, 
  /* [59][0][][] */ -127,85,117,33,-90,-85,124,124,25,-4,25,-14,7,23,85,11, 
  /* [60][0][][] */ 7,-9,-29,4,11,-127,-35,-12,-7,2,8,-4,20,-20,4,20, 
  /* [61][0][][] */ 39,-2,42,127,84,31,25,23,-97,21,27,66,-2,30,20,-47, 
  /* [62][0][][] */ -48,127,67,-60,-27,21,-76,97,31,-67,-100,-83,-21,-109,-93,-61, 
  /* [63][0][][] */ -29,33,-6,127,-59,17,-71,-28,-41,-3,-20,-31,20,41,49,30, 
  /* [64][0][][] */ 9,-39,6,46,24,-11,-8,63,2,-10,-16,-60,0,-127,74,0, 
  /* [65][0][][] */ -24,-41,12,-127,82,-40,95,-41,-7,46,-3,-125,8,-27,7,-53, 
  /* [66][0][][] */ 60,-7,52,-15,48,15,43,101,-14,-99,26,1,54,127,29,44, 
  /* [67][0][][] */ -9,43,-8,-127,-5,1,-91,37,121,-74,-4,32,19,101,84,68, 
  /* [68][0][][] */ -8,48,127,5,13,8,-3,6,-35,-27,-32,-39,10,-40,75,-47, 
  /* [69][0][][] */ 115,84,-12,3,-100,-25,-39,-39,54,27,71,-15,-47,31,60,-127, 
  /* [70][0][][] */ 40,-1,-45,14,-30,21,40,127,-2,107,-60,4,23,44,-16,28, 
  /* [71][0][][] */ -5,-5,0,3,7,-56,-12,17,-15,16,-59,16,-127,17,35,54, 
  /* [72][0][][] */ 18,23,-127,0,4,5,31,81,-45,-37,-6,-37,42,9,2,13, 
  /* [73][0][][] */ -17,-12,51,-9,40,-31,-65,-127,28,-38,54,4,16,-60,22,-14, 
  /* [74][0][][] */ 24,35,46,88,35,7,-67,73,-87,1,-49,31,24,-127,45,-85, 
  /* [75][0][][] */ -4,34,-36,-2,9,22,41,-5,111,7,-15,-44,35,127,-30,13, 
  /* [76][0][][] */ 1,-11,8,23,-18,-5,-7,78,32,-13,-13,-127,-16,-4,10,6, 
  /* [77][0][][] */ 10,7,15,120,-74,40,66,127,6,65,1,88,-48,-9,-13,15, 
  /* [78][0][][] */ -23,21,21,-127,12,-33,-18,29,25,-73,-19,-98,2,104,63,24, 
  /* [79][0][][] */ -37,-64,-67,-45,-100,14,47,-72,127,40,14,48,3,24,28,-54, 
  /* [80][0][][] */ -46,1,112,-69,13,1,13,-80,-5,55,-51,-127,-2,87,96,-43, 
  /* [81][0][][] */ -56,44,-127,29,63,-124,-27,53,10,-42,64,5,14,-5,21,6, 
  /* [82][0][][] */ 127,-23,-11,10,2,-82,-28,6,-5,-18,-97,-12,98,-3,-18,27, 
  /* [83][0][][] */ -15,46,-104,-78,-29,-8,34,-102,48,42,-38,-127,9,30,47,81, 
  /* [84][0][][] */ -44,49,58,-52,30,-20,70,-127,-65,39,-9,-50,63,68,11,23, 
  /* [85][0][][] */ -71,127,49,-118,-80,-23,-23,20,-44,21,-60,37,-4,-2,-112,-38, 
  /* [86][0][][] */ -23,14,-23,-2,-45,-45,127,38,-4,-16,-9,-12,8,10,84,0, 
  /* [87][0][][] */ -7,-58,12,-127,14,-33,61,-26,9,34,4,-113,-24,-10,23,-43, 
  /* [88][0][][] */ 127,-18,52,12,28,-71,-2,31,-14,42,-82,3,-1,21,44,-16, 
  /* [89][0][][] */ 26,1,-33,-43,35,-8,-18,-15,-33,-12,2,-85,127,16,12,-35, 
  /* [90][0][][] */ 11,-40,23,-81,64,-4,-74,72,50,-106,-56,-56,19,127,17,-108, 
  /* [91][0][][] */ -38,4,-36,-75,1,-35,-37,-127,43,84,-7,-124,-45,-45,14,29, 
  /* [92][0][][] */ -21,9,40,13,5,-127,25,-6,-8,-36,-4,-16,10,-24,27,14, 
  /* [93][0][][] */ 50,-30,127,-16,-38,63,25,-45,-25,4,-64,-34,-17,10,42,6, 
  /* [94][0][][] */ 26,-1,-5,-6,51,-4,-18,-13,-4,-22,15,-82,127,-19,33,-26, 
  /* [95][0][][] */ 94,127,14,43,-71,-20,-52,-1,-11,-16,87,-43,-40,34,104,-83, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.001012801774777472, 0.0013382330071181059, 0.00079357740469276905, 0.0013066937681287527, 0.0010860491311177611, 0.0010483236983418465, 0.00064884411403909326, 0.00086951791308820248, 0.00054737774189561605, 0.0011299254838377237, 0.00040914112469181418, 0.00060656428104266524, 0.001175339799374342, 0.0028214708436280489, 0.00066449679434299469, 0.00064766797004267573, 0.0003325734578538686, 0.00059779075672850013, 0.0015313818585127592, 0.0011689495295286179, 0.00040093171992339194, 0.00033378135412931442, 0.00044513275497592986, 0.00023154226073529571, 0.00058782187988981605, 0.0012188572436571121, 0.001410098047927022, 0.0009615496383048594, 0.00068565213587135077, 0.0013843706110492349, 0.00058991700643673539, 0.00060843885876238346, 0.00064141477923840284, 0.00066583836451172829, 0.0011598276905715466, 0.00098179688211530447, 0.000528415956068784, 0.00044994181371293962, 0.00070068304194137454, 0.0010793780675157905, 0.00056571187451481819, 0.0017107933526858687, 0.00090488226851448417, 0.00049516512081027031, 0.0011312258429825306, 0.00050298083806410432, 0.00084328535012900829, 0.00082379288505762815, 0.00081337749725207686, 0.00077551370486617088, 0.00078229419887065887, 0.00059478363255038857, 0.0013413854176178575, 0.0006124356877990067, 0.001063248491846025, 0.00086258572991937399, 0.0013259267434477806, 0.0012797710951417685, 0.00095780461560934782, 0.00048630384844727814, 0.0020296648144721985, 0.0011299834586679935, 0.00057771115098148584, 0.0009795257356017828, 0.001544052385725081, 0.00050618709065020084, 0.00035088657750748098, 0.00060609763022512197, 0.0017252720426768064, 0.0011708417441695929, 0.0005797799676656723, 0.00073038029950112104, 0.0020696446299552917, 0.0010435599833726883, 0.0010437724413350224, 0.00067143695196136832, 0.00099681608844548464, 0.00025226193247362971, 0.00035694480175152421, 0.00073930970393121243, 0.00061963667394593358, 0.00044586803414858878, 0.00059518200578168035, 0.00050018698675557971, 0.00036235657171346247, 0.00079505180474370718, 0.0020457312930375338, 0.00043677631765604019, 0.00044801359763368964, 0.0013916537864133716, 0.0007666750461794436, 0.00046183817903511226, 0.00077120668720453978, 0.0016375113045796752, 0.0010379208251833916, 0.00052843353478237987, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -11602, 21391, -8054, -7238, -18969, 6428, 21851, -43718, -1621, 7342, 19200, 15313, 2213, 32272, 1429, 12312, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00088989094365388155, 0.00032477095373906195, 0.00027908044285140932, 0.00030407877056859434, 0.0004505222022999078, 0.00036959227873012424, 0.00045164153561927378, 0.000344349246006459, 0.00036821383400820196, 0.00032017423654906452, 0.00065716815879568458, 0.00058883294695988297, 0.00038652963121421635, 0.00020015143672935665, 0.00050628540338948369, 0.0006999187171459198, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -15,-14,-9,-31,19,-3,-4,1,26,-13,1,7,11,-14,-21,9,-21,15,-7,0,8,-41,11,6,-7,20,-3,127,16,-16,56,-21,3,18,3,8,12,25,-29,-1,-14,5,24,46,2,17,15,18,41,12,-5,45,23,-20,-19,61,1,7,-27,-21,-20,31,-20,-1,-19,-56,-1,34,-4,17,13,-12,0,-22,-4,-11,-10,21,5,12,-3,-7,24,32,-4,-14,-11,-61,11,-7,-7,1,51,2,-30,-8, 
  /* [1][0][][] */ 63,-65,-95,-73,102,-29,70,19,-69,-76,-64,-39,-28,-24,-51,69,-53,23,60,17,29,127,-52,-47,49,-32,-19,-86,64,-45,-70,87,-25,-9,-1,-3,-39,-94,8,21,-35,45,-45,-38,-2,92,17,-24,20,-53,7,-124,-31,57,56,-27,-48,-34,-7,-45,33,-82,-8,-65,-120,107,-61,-44,-1,-31,-37,-1,58,-121,-15,25,13,-79,40,16,-9,-34,34,-38,-15,31,-35,62,21,-43,34,26,-2,-42,58,85, 
  /* [2][0][][] */ -40,36,-55,-3,54,61,29,68,-2,-127,12,23,17,-8,34,5,-19,-24,-61,37,5,-49,69,7,39,51,36,-7,39,-16,49,-50,29,17,-27,51,-43,2,33,2,47,-53,66,-27,1,1,-18,46,18,14,-23,68,54,-17,-28,87,-9,1,-4,13,10,22,21,25,20,8,-14,-16,-30,24,-3,-28,-18,-44,7,40,12,32,14,-2,54,-19,6,3,-33,31,39,72,13,26,-11,-29,-12,11,-29,-13, 
  /* [3][0][][] */ 21,20,91,3,52,-25,5,24,-33,-66,-3,-23,14,45,30,69,20,-4,14,3,127,-55,53,7,44,-6,-8,5,39,15,-23,67,-96,-3,26,3,22,13,19,6,-40,-13,51,34,11,33,-42,-36,-42,-25,-44,82,-11,-73,-14,67,-104,37,7,51,-3,79,-16,-24,47,77,-10,-59,34,-15,-14,-25,43,-3,5,-30,0,-18,61,17,1,-60,-3,-7,-29,7,31,50,8,14,-2,-1,43,92,44,-33, 
  /* [4][0][][] */ 41,-19,-8,-2,127,33,21,-18,-14,-75,-23,-29,-51,8,2,87,12,-37,-55,112,13,0,37,-19,8,-11,10,-24,7,10,91,-71,90,57,-4,20,50,-18,26,23,-58,5,-4,12,-20,-49,4,-6,30,29,-44,15,17,-31,-8,-58,42,12,12,40,-23,57,31,37,81,23,-3,-9,-56,38,39,68,35,-59,-42,9,81,42,109,-22,-20,0,9,3,-63,-15,37,60,-76,19,-8,-41,22,29,22,-5, 
  /* [5][0][][] */ 34,-14,-15,-3,-1,-16,58,-21,-18,-43,10,24,18,26,-9,43,-31,15,6,-5,22,30,-43,72,-3,-12,10,-48,-8,45,21,-7,1,12,-8,-51,29,26,3,-13,-8,-24,55,-28,0,7,6,-42,-16,-16,-11,8,-15,-31,-13,-47,-5,14,-17,17,41,15,-6,60,20,18,12,62,-5,77,23,22,20,12,-3,74,-4,-22,15,13,-9,-2,-1,59,-7,34,-32,127,3,35,-5,-4,14,41,-67,13, 
  /* [6][0][][] */ 45,-67,47,-35,-24,11,14,3,-9,11,-6,-60,-35,2,-43,3,33,-27,10,4,-47,51,19,18,-4,-21,-12,-8,-13,-4,-1,13,54,-2,31,-17,0,1,-32,-88,-27,62,3,-26,25,0,-11,22,-27,4,-29,37,-32,-48,13,25,11,-52,-21,-2,-6,35,59,-79,28,-44,-10,-35,-5,-19,127,2,-37,4,-3,21,-72,-10,3,11,38,10,4,0,-27,22,38,-8,17,5,45,-25,-26,-13,-32,-19, 
  /* [7][0][][] */ -28,127,65,36,68,28,20,-30,-3,-29,20,-40,-55,39,27,-45,17,-51,16,0,34,-14,21,-17,23,5,27,-12,39,4,-26,29,26,-7,-36,-10,14,3,-40,79,-24,47,-5,4,-11,-40,-1,-18,-81,-43,33,-20,-32,-29,-29,63,75,10,-30,-13,18,-33,31,-39,-39,84,-34,-96,-17,-45,-3,71,-14,-52,19,7,-3,72,56,-26,-41,-75,-40,10,-33,61,-1,-24,-16,20,-31,-33,-60,-38,22,29, 
  /* [8][0][][] */ -25,-15,62,32,-127,-20,56,-34,34,65,71,18,-9,33,26,-29,-61,-16,64,-8,-15,-19,-124,78,26,16,92,-27,4,10,-13,68,59,-28,7,2,-48,-28,40,23,58,1,35,-50,-64,10,2,34,-119,-41,21,35,-53,-18,-38,43,42,-48,-63,-11,40,-10,-20,8,-21,88,-23,-10,33,22,-26,-8,64,89,56,-25,-57,-34,-28,19,-96,6,-22,-27,17,38,83,61,67,-49,71,38,3,-3,126,49, 
  /* [9][0][][] */ -30,-72,-9,36,73,75,-15,-3,33,-45,87,86,8,21,79,-112,12,-35,2,-10,-35,-97,16,-4,-18,32,25,37,-18,-13,-34,-20,13,8,-81,54,35,43,0,35,78,-74,22,21,-29,14,-91,0,53,6,-6,-15,41,45,-39,-11,-18,49,-22,6,11,-25,-18,127,-79,8,21,-24,2,35,-42,-81,25,27,-3,17,32,-57,4,-5,25,10,3,12,6,-49,37,34,47,-10,-59,13,-51,33,40,-36, 
  /* [10][0][][] */ -65,-30,-16,-41,-10,3,95,7,37,-7,20,50,41,1,-2,-18,-34,13,-17,-9,-12,-22,21,26,0,-1,21,-101,18,-55,75,-47,5,26,-10,13,22,62,7,-17,22,-38,35,-36,3,14,15,49,4,45,-9,33,-30,-21,-11,-23,5,-4,-22,-31,12,18,-20,35,-24,89,-12,-42,16,-16,-8,-11,-33,6,18,48,7,43,-32,13,-13,6,16,18,11,-30,-7,127,11,3,-2,8,30,-6,49,-38, 
  /* [11][0][][] */ -107,24,5,5,42,-43,-13,37,-60,-12,-27,23,41,31,-27,-33,21,-19,-62,-43,10,-76,2,14,68,18,92,-6,-33,-37,-38,-4,-18,-12,-26,0,30,69,32,-4,26,-24,0,-14,75,40,45,61,48,30,0,69,1,-45,9,35,-96,-40,-76,-40,-32,-5,-3,45,-44,-3,8,-13,30,3,-11,43,-41,24,24,-20,-14,70,-127,45,-34,-13,-77,-80,123,13,37,-3,5,62,-54,-71,-26,70,-8,-44, 
  /* [12][0][][] */ 37,-19,-79,-34,43,5,7,-49,-20,-8,44,3,3,-29,34,49,-35,22,-1,4,-22,44,-42,49,5,6,-59,100,-39,50,3,-8,-5,55,-8,4,-37,-50,-3,6,-56,-30,-6,25,10,-1,49,-14,-24,14,-23,-63,-25,-13,6,-72,0,15,45,19,-5,-51,-16,28,67,-106,15,48,-43,-127,7,36,27,-8,18,104,33,-14,11,17,-33,13,-19,-14,13,-18,-3,-79,-30,-15,29,4,-58,13,-38,21, 
  /* [13][0][][] */ -33,45,-42,4,-112,7,-13,-37,-60,12,52,6,63,-1,-18,25,-33,65,-28,-14,-3,79,39,-44,81,13,-41,-42,-1,-18,-46,-91,-117,-33,-14,-36,-57,-76,48,-8,-73,114,-55,5,71,22,-7,-55,24,-12,40,-15,94,-72,96,-70,8,89,71,-10,20,22,-22,-14,-18,-49,-14,14,2,21,38,-127,14,-64,-90,28,85,47,-62,-50,35,-44,6,-53,55,-56,56,-45,-60,-41,3,39,55,-59,-43,31, 
  /* [14][0][][] */ -35,36,-26,-67,49,-4,-76,29,-127,25,-6,2,-57,-62,-91,-28,-75,-19,53,13,38,30,17,-123,-19,-20,-61,-80,18,-35,-46,10,-81,-33,36,-7,-45,-38,7,13,-13,106,-118,4,-53,-17,6,20,114,-64,13,-43,30,51,-84,31,-45,17,-99,7,28,4,56,-4,15,72,-13,-3,-29,22,48,54,48,-10,-27,5,22,-56,-17,-114,39,-76,6,-1,2,-70,-24,-7,-62,9,51,64,4,-14,-2,13, 
  /* [15][0][][] */ -42,-57,7,-20,-1,9,-21,-28,-20,12,-23,-20,19,17,59,-28,-65,-16,-25,12,-13,-11,-73,-29,13,6,-8,-26,-7,-22,38,-56,-9,7,15,-3,-15,6,-66,20,28,-42,-10,23,-3,-46,29,15,17,23,-8,-127,-8,30,-17,23,22,-8,-27,30,9,-1,44,-17,-11,23,-28,-13,-5,25,-5,43,-32,-1,11,-38,-26,0,1,2,-13,33,4,46,16,-60,-31,-32,-46,54,28,63,-16,-31,-7,-12, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.037820365279912949, 0.013802765868604183, 0.011860919184982777, 0.012923347763717175, 0.019147193059325218, 0.015707671642303467, 0.019194765016436577, 0.014634842053055763, 0.015649087727069855, 0.013607405126094818, 0.027929646894335747, 0.025025399401783943, 0.016427509486675262, 0.00850643590092659, 0.021517129614949226, 0.029746545478701591, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 21791, 67493, -3660, 621, 14726, -6388, -2027, -1237, 5617, 10874, -4395, 466, 709, 2218, 4468, -11631, -3796, -1839, -1225, 17633, -13659, 25507, -2766, 9983, 17267, -1052, -3885, 16496, 14202, -20700, 2807, 24849, 27653, -12689, 1861, 643, 530, 1623, 4032, -11770, -4144, -2046, -6810, -104, 30224, -962, 11764, 750, -16020, 2837, 656, -144, -2515, 25050, -4826, 11141, 21895, -1248, 40905, -12, -8967, 22, -497, 625, -4807, 14351, -1276, -4050, -778, 3027, 103, -6042, -67, 1530, -3344, -4884, -1719, -550, 38659, -8980, -7190, -9772, -369, -301, 52119, -13797, -9507, -27577, -6196, 7832, -2126, 38912, -1831, -918, -2625, -2068, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00011541492131073028, 8.5127438069321215e-05, 0.00010234238288830966, 0.00024732202291488647, 0.00023102053091861308, 0.00013510900316759944, 5.0544422265375033e-05, 8.9297798695042729e-05, 0.00024428727920167148, 0.00022757150873076171, 0.00029362257919274271, 0.00014888995792716742, 0.00036416435614228249, 0.00019538262858986855, 0.00035004201345145702, 0.00013859693717677146, 0.00021447820472531021, 0.0002162547898478806, 0.00025296377134509385, 5.8915764384437352e-05, 5.4833722970215604e-05, 5.8622823416953906e-05, 0.0001426923117833212, 7.7133547165431082e-05, 7.7619166404474527e-05, 0.00011887505388585851, 0.00014596480468753725, 0.00019841198809444904, 7.8538694651797414e-05, 0.00051150791114196181, 0.00036245840601623058, 0.000241655288846232, 9.7831041784957051e-05, 0.00013132381718605757, 0.00029022467788308859, 0.00051694991998374462, 0.00058623409131541848, 0.00027675603632815182, 0.00023477575450669974, 6.4037063566502184e-05, 0.00025610392913222313, 0.00025734948576427996, 0.00043197063496336341, 0.00011121886200271547, 0.00036258177715353668, 9.5490991952829063e-05, 8.992655057227239e-05, 0.0003110119141638279, 0.00056855060392990708, 0.00011652153625618666, 0.00036736653419211507, 0.00022430761600844562, 0.00022118580818641931, 0.00011798794730566442, 0.00017190667858812958, 0.00014527981693390757, 0.00014144483429845423, 0.0004761276941280812, 4.2684128857217729e-05, 0.00019350407819729298, 0.00028854756965301931, 0.00032303936313837767, 0.00013318985293153673, 0.00021145607752259821, 0.00016024088836275041, 0.00013411539839580655, 0.00032276968704536557, 0.00052830210188403726, 0.00025287660537287593, 0.00010408556408947334, 0.00023367632820736617, 0.00010290147474734113, 0.00030473797232843935, 0.00016818696167320013, 0.00024848207249306142, 0.00039510591886937618, 0.00014712438860442489, 7.5367519457358867e-05, 6.553951243404299e-05, 0.00014953032950870693, 0.00014568604819942266, 0.00024896147078834474, 0.00021045008907094598, 0.00030325073748826981, 6.5828200604300946e-05, 0.00011657439608825371, 7.5094154453836381e-05, 0.00051303382497280836, 0.00030786450952291489, 0.00013237020175438374, 0.00032805209048092365, 2.8845171982538886e-05, 0.00021166284568607807, 0.00013054390728939325, 0.00045569066423922777, 0.00030810481985099614, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -56,-71,-2,127,23,75,105,-53,-11,-17,-14,-3,-30,2,38,6,-9,-43,25,23,19,-126,127,9,-63,11,54,-28,-127,-127,40,21,12,39,57,-18,-29,-7,27,-2,-16,31,-103,71,24,-81,37,42,-17,52,-27,19,4,-10,12,46,-93,-49,-74,-19,-7,-4,17,38,69,-25,75,7,-8,16,19,127,24,24,23,-4,-7,18,127,-6,-14,7,-26,23,127,20,-84,-16,-2,-36,-18,-50,8,-31,-13,29, 127,-127,83,104,-41,127,62,-112,68,2,-19,127,127,-96,-11,16,11,127,127,-113,127,-68,77,75,-120,-114,-66,-33,-53,47,-59,-23,-89,47,-127,-83,-41,-16,-54,73,-2,127,127,82,-52,-122,-114,-50,-15,-127,39,83,69,-33,41,79,-45,46,-97,-114,-43,-44,-60,66,72,-60,27,28,-82,34,-21,84,116,127,6,17,2,58,-32,49,66,127,127,-23,-8,78,-118,127,-119,-96,2,-127,-85,-127,-34,105, -91,-14,37,-81,15,-27,89,-10,80,-39,-24,24,-20,-4,-7,-2,-10,-12,12,-5,-15,-127,30,5,-127,103,4,-55,119,52,-14,6,-4,9,12,-28,-8,33,19,35,27,20,-112,68,19,-25,35,15,-13,12,-19,4,-8,-2,-8,23,-74,10,-58,50,2,40,37,-4,1,-39,-30,22,5,4,-4,39,14,-27,-4,4,-7,-10,-81,1,-22,-27,-18,4,-111,7,-34,-21,-49,27,-25,-55,34,-30,-12,11, 
  /* [0][1][][] */ -68,-73,81,-37,-47,100,15,127,-50,-19,1,-117,27,-119,79,40,-4,-53,-19,90,57,-69,47,49,-89,-12,127,-21,-26,67,120,-106,-127,107,-84,-54,-34,30,-30,95,-49,-23,-7,52,-49,127,-24,58,16,96,16,0,16,-57,31,31,127,125,-77,-86,127,-35,-33,127,71,-36,-15,-1,127,43,127,98,-40,104,-3,14,16,13,-28,10,-44,125,-78,113,4,33,-64,30,81,-127,-34,-16,127,-71,-21,4, 72,126,58,-117,127,84,106,40,-127,127,127,-36,-63,-127,-127,127,127,-59,-126,-48,108,97,-123,127,-97,-87,-47,127,-125,110,-127,-127,-92,127,106,127,127,-127,-106,127,-64,-92,104,-127,-127,-38,-127,-127,127,-114,78,45,127,127,127,-127,104,-127,-127,127,20,-80,-127,-104,-127,127,-127,127,-124,-127,-112,-76,-127,-83,127,127,-127,127,-79,127,127,27,-45,-127,56,127,94,47,127,17,127,5,-65,31,127,-127, -61,-14,-47,37,-56,-102,47,-25,19,-39,-25,91,1,99,16,22,-7,65,-2,127,7,-89,-40,14,-76,107,-81,-21,-69,-16,16,-67,-77,39,7,-16,-28,42,-66,56,127,1,-39,35,-37,-62,14,42,9,120,-15,6,-35,-72,6,19,91,5,-1,19,-36,127,98,-57,-37,11,43,-12,-78,125,-20,-75,2,-57,-6,-18,28,14,71,-35,-71,-48,56,17,-47,-22,73,24,17,61,-45,14,-38,93,-24,2, 
  /* [0][2][][] */ -76,1,2,-20,11,-48,86,30,52,-29,-34,-9,15,22,-25,13,-13,69,8,4,-53,-92,5,-4,-18,-48,36,-70,88,42,24,22,9,1,-9,-42,-7,37,-1,12,-17,-1,-65,110,2,29,10,34,-16,-35,6,-22,20,-3,10,18,-72,27,-16,10,15,-1,-19,-9,4,-47,-48,20,-29,18,27,35,16,-22,29,5,20,5,-72,-7,-8,-8,16,15,-121,21,13,-43,-56,-52,-29,-49,12,56,-14,2, 122,34,-127,-38,-74,-28,56,33,-67,-30,-19,-109,-78,119,-13,60,-3,-52,-8,-125,96,-58,-40,11,-102,127,-56,18,-37,-20,-14,-7,-73,16,28,8,-22,-27,127,74,11,-9,74,-29,-39,82,-69,-41,-33,-6,-127,-127,-54,-24,1,39,-68,-6,14,40,-7,-19,9,-51,-48,30,68,-21,113,113,-23,-62,13,-60,3,6,98,8,49,26,11,-105,-51,4,8,21,127,41,-60,43,-19,-113,42,75,-7,34, -70,9,-9,28,14,-76,-127,3,-11,-15,-15,-3,9,-22,19,18,-13,-11,10,21,-46,-108,11,14,17,-86,14,-1,-50,-37,-10,12,33,-23,-3,-21,-33,5,43,-25,24,3,-46,-31,4,70,21,21,-11,-6,4,-13,15,3,-6,-2,-68,-12,-6,-43,-10,10,90,-18,44,-8,1,27,0,15,-6,28,-13,13,5,16,40,-2,81,-13,3,-14,-9,-17,74,11,43,-37,58,45,-19,-70,-2,1,-11,-4, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0049051339738070965, 0.0036179160233587027, 0.0043495511636137962, 0.010511185973882675, 0.0098183723166584969, 0.0057421326637268066, 0.0021481378935277462, 0.003795156255364418, 0.010382208973169327, 0.0096717886626720428, 0.012478958815336227, 0.0063278232701122761, 0.015476984903216362, 0.0083037614822387695, 0.014876785688102245, 0.0058903694152832031, 0.0091153234243392944, 0.0091908285394310951, 0.010750959627330303, 0.0025039198808372021, 0.0023304331116378307, 0.0024914699606597424, 0.006064422894269228, 0.0032781756017357111, 0.0032988144084811211, 0.0050521898083388805, 0.0062035038135945797, 0.0084325093775987625, 0.0033378945663571358, 0.021739086136221886, 0.015404482372105122, 0.010270349681377411, 0.0041578193195164204, 0.0055812620557844639, 0.012334548868238926, 0.021970370784401894, 0.024914948269724846, 0.011762131005525589, 0.0099779693409800529, 0.0027215750887989998, 0.010884416289627552, 0.010937352664768696, 0.018358752131462097, 0.0047268015332520008, 0.015409725718200207, 0.0040583671070635319, 0.0038218782283365726, 0.013218006119132042, 0.024163400754332542, 0.0049521652981638908, 0.015613077208399773, 0.009533073753118515, 0.0094003966078162193, 0.0050144875422120094, 0.0073060337454080582, 0.0061743920668959618, 0.0060114054940640926, 0.020235426723957062, 0.0018140755128115416, 0.008223922923207283, 0.01226327195763588, 0.013729172758758068, 0.0056605683639645576, 0.0089868828654289246, 0.0068102376535534859, 0.0056999041698873043, 0.01371771190315485, 0.022452838718891144, 0.010747255757451057, 0.0044236364774405956, 0.0099312439560890198, 0.0043733124621212482, 0.012951363809406757, 0.0071479459293186665, 0.010560488328337669, 0.016792001202702522, 0.006252786610275507, 0.0032031193841248751, 0.0027854291256517172, 0.0063550388440489769, 0.0061916569247841835, 0.010580862872302532, 0.0089441286399960518, 0.012888155877590179, 0.0027976983692497015, 0.0049544116482138634, 0.0031915016006678343, 0.021803935989737511, 0.013084241189062595, 0.0056257336400449276, 0.013942213729023933, 0.0012259198119863868, 0.0089956708252429962, 0.0055481158196926117, 0.019366852939128876, 0.013094454072415829, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 2920, 6716, 6042, 28440, 19339, -4003, -1420, 7459, 25418, -3611, 10278, 6432, 9113, 9311, 32462, 947, 2061, 5149, 12413, 3316, -173, 650, 10842, -1178, 4706, -59, 9708, 6034, 4411, 29625, 25128, 17488, 12264, -675, 9952, 2920, 1743, 4704, 23567, -720, 11666, 8949, 51467, -3760, 25171, 6039, 7427, 13900, 46373, 8859, -245, 10210, -3837, 109, -3632, 6244, 22, 17576, 4931, 10606, 5979, 15383, 7726, 7931, 9468, 9078, 3747, -6037, 9621, -3560, 4242, 16110, 28685, 7679, -4121, -4711, 12269, 1213, 1639, -1241, 13876, 10884, 5498, 15676, 3155, 212, 9665, 64448, 8614, 10987, 5489, 193, 6067, 9251, 4628, 15826, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.0001810937246773392, 0.00020856499031651765, 0.00029294021078385413, 7.9900986747816205e-05, 0.00015933647227939218, 0.00024270791618619114, 0.0005630948580801487, 0.00021745038975495845, 8.994281233754009e-05, 0.00031457026489078999, 0.0002524261362850666, 0.00015050274669192731, 0.00013723372831009328, 0.0002413992042420432, 7.3114846600219607e-05, 0.00054611515952274203, 0.00025663210544735193, 0.00023290186072699726, 0.00018099340377375484, 0.00036473566433414817, 0.00030325225088745356, 0.00062997755594551563, 0.00018244372040499002, 0.00056330242659896612, 0.00057214446133002639, 0.00019210824393667281, 0.00022512904251925647, 0.00023376406170427799, 0.00037628560676239431, 0.00011590609210543334, 0.00010983822721755132, 0.00014418739010579884, 0.00013506959658116102, 0.00028507984825409949, 0.00020521841361187398, 0.00018235274183098227, 0.00026818030164577067, 0.00030186166986823082, 0.00011610412184381858, 0.00069416803307831287, 0.00015407918544951826, 0.00018003174045588821, 5.3320381994126365e-05, 0.00029149494366720319, 0.00013084989041090012, 0.00025081378407776356, 0.0002288221730850637, 0.00019759120186790824, 8.9011031377594918e-05, 0.00023906536807771772, 0.00022643017291557044, 0.00016568777209613472, 0.00027943035820499063, 0.00036103432648815215, 0.00029336035368032753, 0.00017163115262519568, 0.00023840556968934834, 0.00011071070184698328, 0.00043632459710352123, 0.00013772696547675878, 0.00026796149904839694, 9.1893583885394037e-05, 0.00018665735842660069, 0.00012899251305498183, 0.00026161453570239246, 0.00021265825489535928, 0.00034215269261039793, 0.00022621016250923276, 0.00016811031673569232, 0.00018804104183800519, 0.00025412440299987793, 0.00010125167318619788, 7.3340524977538735e-05, 0.00013214083446655422, 0.00037324056029319763, 0.00028974274755455554, 0.00014641012239735574, 0.00019437326409388334, 0.00041283437167294323, 0.00026751492987386882, 0.00014834113244432956, 0.00015391565102618188, 0.0001714060636004433, 0.00012494265683926642, 0.00036186756915412843, 0.00023206802143249661, 0.00023912593314889818, 5.8651174185797572e-05, 0.00016460898041259497, 0.00020346562087070197, 0.00022996883490122855, 0.0004281809669919312, 0.00023713418340776116, 0.0001683215523371473, 0.00022880053438711911, 0.00011245244968449697, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 31,86,41,112,46,58,0,30,53,17,-67,127,-4,-108,13,-55, 
  /* [1][0][][] */ 23,29,-16,-42,-3,-2,104,-127,-16,91,4,19,-9,-68,7,15, 
  /* [2][0][][] */ -127,24,-21,34,19,-42,38,67,-86,-28,66,-37,13,20,5,-24, 
  /* [3][0][][] */ -48,54,57,42,-55,69,85,127,-55,64,-70,-18,37,-120,-78,-39, 
  /* [4][0][][] */ -13,11,30,47,-28,86,14,40,-13,32,-31,-23,29,7,-127,-13, 
  /* [5][0][][] */ -9,-18,80,-22,21,-5,26,44,-31,127,-26,-101,-4,19,-68,-34, 
  /* [6][0][][] */ -11,-4,22,1,42,61,-65,-91,3,10,69,-6,127,-22,10,-53, 
  /* [7][0][][] */ 18,82,99,22,-5,-37,-14,-45,-127,23,-114,-112,33,-31,33,44, 
  /* [8][0][][] */ 38,50,84,28,-83,80,59,2,28,67,58,-59,-35,-13,-127,-56, 
  /* [9][0][][] */ 25,-77,76,6,10,2,27,77,127,5,44,-4,12,31,-85,-22, 
  /* [10][0][][] */ 12,-127,-36,26,-81,0,-51,68,81,81,73,16,-29,78,101,-48, 
  /* [11][0][][] */ 17,-7,13,-127,75,-12,-111,-100,-104,-3,-66,-83,67,5,63,-24, 
  /* [12][0][][] */ -18,20,-4,-20,-5,-34,-70,19,-68,-127,-31,-6,19,104,66,46, 
  /* [13][0][][] */ -58,-71,-3,47,18,-10,8,-49,84,61,32,26,8,6,127,35, 
  /* [14][0][][] */ -25,-95,42,15,25,40,19,85,17,71,-43,-51,2,32,-127,98, 
  /* [15][0][][] */ 28,-34,4,41,11,1,127,10,3,-115,12,-22,10,-27,-7,-23, 
  /* [16][0][][] */ 15,-18,-37,30,17,24,8,-46,127,7,80,29,10,111,66,95, 
  /* [17][0][][] */ -20,-67,44,127,49,22,-45,-8,77,-3,-59,-7,1,22,-20,-5, 
  /* [18][0][][] */ -56,44,19,53,-127,19,-5,46,-48,-33,-28,-95,28,-79,29,18, 
  /* [19][0][][] */ 2,-89,36,-45,127,21,-60,50,5,-84,43,-29,-15,19,21,45, 
  /* [20][0][][] */ 37,-27,46,-109,-23,-14,-32,8,-22,-62,65,-35,6,20,-28,127, 
  /* [21][0][][] */ -40,-18,13,19,-15,18,-63,1,-3,55,15,94,-127,-16,16,-17, 
  /* [22][0][][] */ 31,-36,72,-14,16,-47,-6,-34,-127,20,-8,-47,-29,-23,66,-39, 
  /* [23][0][][] */ -2,3,5,-16,36,16,-17,-12,-13,-8,60,-15,127,4,-7,-66, 
  /* [24][0][][] */ 8,13,10,-51,-50,-32,53,33,-49,10,-39,-127,16,-116,19,30, 
  /* [25][0][][] */ -67,17,-81,54,-23,-18,-127,-98,-102,10,-8,-19,-46,-117,12,-89, 
  /* [26][0][][] */ 7,1,75,-47,127,-8,-3,11,62,-3,69,12,-23,30,-10,44, 
  /* [27][0][][] */ 49,-12,8,-34,-51,-65,-2,2,-2,36,-127,21,-13,-19,11,49, 
  /* [28][0][][] */ -127,-21,-96,-44,35,-19,46,-26,-21,34,-103,57,61,25,-56,45, 
  /* [29][0][][] */ -86,-66,-9,106,13,-11,12,-49,-25,-18,-127,9,2,-64,13,-39, 
  /* [30][0][][] */ 68,-15,127,-32,-10,31,-39,49,-16,-52,76,8,-65,0,-23,-14, 
  /* [31][0][][] */ 29,-109,-12,-27,8,-127,48,-42,5,50,63,22,-29,88,55,99, 
  /* [32][0][][] */ 22,73,-46,55,-127,18,-75,-56,-66,-46,-33,43,40,87,39,89, 
  /* [33][0][][] */ 55,-3,33,127,5,-17,21,-20,-117,70,61,-1,-23,-4,0,92, 
  /* [34][0][][] */ 48,-9,12,8,30,-24,-127,-22,-12,71,-32,-12,-22,23,-18,28, 
  /* [35][0][][] */ 74,47,-38,-22,-11,-127,-26,3,-55,5,-92,-45,61,37,-14,7, 
  /* [36][0][][] */ 26,2,-127,13,36,-6,-32,13,-41,-6,-7,-8,-8,-3,2,-5, 
  /* [37][0][][] */ 9,21,127,8,-46,23,32,-37,4,80,16,55,-1,-52,11,-4, 
  /* [38][0][][] */ -121,59,-17,89,2,69,25,-14,31,24,127,5,-43,4,45,-40, 
  /* [39][0][][] */ -8,3,13,40,30,-18,-127,39,27,51,-14,-23,2,-8,-25,-11, 
  /* [40][0][][] */ 35,105,-49,127,16,-1,76,55,16,44,10,65,-57,25,-56,55, 
  /* [41][0][][] */ -25,34,-20,-17,-63,-18,127,124,-46,86,-34,-34,44,90,74,19, 
  /* [42][0][][] */ 4,-78,10,19,47,67,-96,58,-22,-127,72,72,-111,67,-34,-88, 
  /* [43][0][][] */ -63,-15,21,-83,29,22,-52,-35,-17,29,16,-26,-127,-25,36,-27, 
  /* [44][0][][] */ 63,-18,-13,-40,-19,-15,3,-41,127,-38,-3,57,49,81,15,79, 
  /* [45][0][][] */ -22,-33,-26,-87,57,3,-21,31,-29,-127,-25,-5,32,90,-42,76, 
  /* [46][0][][] */ -46,-1,-46,68,-70,-51,-4,-98,-127,32,-36,-30,-6,22,3,-12, 
  /* [47][0][][] */ -15,-1,-46,82,-8,29,4,9,3,55,95,127,-74,-48,52,-6, 
  /* [48][0][][] */ -22,-29,6,-127,0,14,26,30,-21,15,21,-45,12,37,58,9, 
  /* [49][0][][] */ -72,-66,127,48,16,113,-85,-47,-7,-64,-31,-8,-85,4,-99,-106, 
  /* [50][0][][] */ 10,111,25,-127,78,-6,-30,49,127,-46,-57,27,-28,-40,29,-44, 
  /* [51][0][][] */ 23,-11,32,-6,36,15,-42,-127,-36,-123,-63,-14,50,7,6,56, 
  /* [52][0][][] */ 46,18,7,16,23,-28,-23,108,-61,127,-42,-23,88,89,4,-41, 
  /* [53][0][][] */ 30,70,-1,-72,-23,-10,25,-15,-74,-53,-20,56,28,-127,-43,-33, 
  /* [54][0][][] */ -3,38,39,44,78,-32,43,-23,21,66,-1,-4,-2,127,-69,-18, 
  /* [55][0][][] */ -127,105,126,-9,24,-22,-42,14,2,26,87,26,-71,-49,110,-43, 
  /* [56][0][][] */ 90,23,5,-86,92,2,-46,23,37,-34,39,127,-40,44,84,43, 
  /* [57][0][][] */ -23,-27,14,51,-22,36,18,127,-9,-4,-7,-30,8,36,-8,-11, 
  /* [58][0][][] */ 14,104,-22,-127,-18,35,-16,11,65,-39,-35,67,1,-85,39,47, 
  /* [59][0][][] */ 11,23,40,-127,-63,31,-23,-50,-15,17,99,-84,-26,-92,-46,47, 
  /* [60][0][][] */ 82,-22,84,-71,-31,127,68,-51,-50,28,1,-35,15,-17,56,27, 
  /* [61][0][][] */ -5,20,7,-54,-14,26,127,80,-34,59,15,9,-1,41,-20,-47, 
  /* [62][0][][] */ -14,-2,-15,49,-127,8,-55,91,-1,-15,-85,-107,5,-91,69,6, 
  /* [63][0][][] */ 51,-17,-17,-90,-27,63,-120,-127,-105,-4,-61,-65,78,45,34,-31, 
  /* [64][0][][] */ -25,-14,-1,49,62,0,-12,-127,10,-120,-9,-49,20,-2,-40,-18, 
  /* [65][0][][] */ -67,-15,19,-55,25,107,17,-89,-127,-14,26,-28,63,49,-22,-11, 
  /* [66][0][][] */ 75,-29,39,28,-67,38,-9,45,-17,-3,64,-109,21,7,-127,-43, 
  /* [67][0][][] */ 33,-61,-27,56,127,-48,-71,-88,24,-79,-27,-15,-84,32,-14,21, 
  /* [68][0][][] */ 9,-12,-58,-6,-55,-70,10,-117,-40,-9,84,-32,-30,33,127,-37, 
  /* [69][0][][] */ -115,73,-68,102,-16,-59,5,125,28,9,53,55,127,35,-54,-30, 
  /* [70][0][][] */ -19,20,-53,11,-47,-1,87,127,-3,1,-54,-19,35,53,27,5, 
  /* [71][0][][] */ -5,-64,-62,-59,24,-48,-6,76,-28,-105,-32,-57,3,-127,93,15, 
  /* [72][0][][] */ -47,72,-28,10,7,-66,-113,-127,-11,12,-113,-13,-20,74,-26,6, 
  /* [73][0][][] */ -77,-127,-13,-95,-102,-96,58,-36,-12,7,-37,-49,44,-68,83,-34, 
  /* [74][0][][] */ -33,34,44,99,-11,-5,-127,73,32,-39,-28,-36,4,-13,-36,2, 
  /* [75][0][][] */ -37,37,-26,37,-39,69,73,127,19,68,-18,-14,-107,69,-1,22, 
  /* [76][0][][] */ -19,-44,-30,17,36,-50,-120,-127,-52,-93,-30,-99,98,24,68,8, 
  /* [77][0][][] */ -127,26,-102,-47,-71,31,-31,-97,111,-44,-80,-18,42,40,27,-116, 
  /* [78][0][][] */ -127,-94,-36,81,74,73,19,-4,-18,-77,-113,7,84,-38,50,50, 
  /* [79][0][][] */ 8,8,27,-57,127,0,53,11,67,31,6,2,-36,-44,30,-92, 
  /* [80][0][][] */ -3,-15,109,-99,-3,-41,39,19,-27,1,25,-30,-22,127,-39,38, 
  /* [81][0][][] */ 15,-16,0,67,-51,-1,-40,-24,26,5,-30,-16,-5,49,-127,36, 
  /* [82][0][][] */ -18,35,-12,-127,-31,-38,7,-102,-55,-58,-20,-24,-39,-18,-77,5, 
  /* [83][0][][] */ -8,-10,-36,-15,-16,-5,-7,41,-105,-27,-40,-127,55,-105,-7,94, 
  /* [84][0][][] */ 127,32,19,44,-99,13,-50,32,-32,-48,79,-56,-50,25,54,-70, 
  /* [85][0][][] */ -17,12,-2,-10,19,-16,-109,106,-127,-125,-48,21,-10,31,42,-102, 
  /* [86][0][][] */ 57,60,-3,20,-30,45,-37,86,-96,-73,-29,-57,-32,-127,0,75, 
  /* [87][0][][] */ 127,-41,-14,-30,-73,-25,17,-33,-31,27,-124,-54,70,-37,-4,40, 
  /* [88][0][][] */ -26,109,-74,4,-22,-36,-48,-36,79,32,-3,-21,2,-10,127,-55, 
  /* [89][0][][] */ -2,68,-127,-8,-39,-22,35,-90,108,62,-24,-16,65,12,-46,-120, 
  /* [90][0][][] */ -6,-16,-4,-75,-60,21,112,-127,18,-82,1,-16,28,36,-54,-1, 
  /* [91][0][][] */ 57,16,16,-68,11,20,4,-44,-97,11,73,110,42,2,9,127, 
  /* [92][0][][] */ 34,-9,11,38,39,-13,-62,-127,20,-71,24,-41,-38,0,-20,-32, 
  /* [93][0][][] */ 59,55,-19,-127,-10,-14,-58,-22,-37,-121,38,-42,32,86,22,62, 
  /* [94][0][][] */ -50,16,-19,-8,45,-127,-67,30,-72,-122,58,21,30,-12,-61,-74, 
  /* [95][0][][] */ -110,71,-3,-107,7,10,-30,-32,32,-24,-95,-127,50,60,-46,41, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00058011169312521815, 0.00066811253782361746, 0.0009383982396684587, 0.00025595308397896588, 0.00051041500410065055, 0.00077748525654897094, 0.0018038058187812567, 0.00069657585117965937, 0.00028812084929086268, 0.0010076875332742929, 0.00080861634341999888, 0.00048211723333224654, 0.00043961152550764382, 0.00077329296618700027, 0.00023421451624017209, 0.0017494133207947016, 0.0008220897288993001, 0.00074607273563742638, 0.0005797903286293149, 0.0011683863122016191, 0.00097143166931346059, 0.0020180563442409039, 0.00058443623129278421, 0.0018044707830995321, 0.0018327950965613127, 0.00061539537273347378, 0.00072117347735911608, 0.0007488346891477704, 0.0012053850805386901, 0.00037129104021005332, 0.00035185337765142322, 0.00046188672422431409, 0.00043267902219668031, 0.00091321853687986732, 0.00065739220008254051, 0.00058414478553459048, 0.00085908290930092335, 0.00096697709523141384, 0.00037192541640251875, 0.0022236828226596117, 0.00049357389798387885, 0.00057670974638313055, 0.00017080534598790109, 0.00093376851873472333, 0.00041916168993338943, 0.00080345140304416418, 0.00073300395160913467, 0.00063295935979112983, 0.00028513598954305053, 0.00076581677421927452, 0.00072534149512648582, 0.00053076061885803938, 0.00089512113481760025, 0.0011565295280888677, 0.00093974417541176081, 0.00054979947162792087, 0.00076370319584384561, 0.00035464824759401381, 0.0013977127382531762, 0.00044119157246313989, 0.00085838203085586429, 0.00029436990735121071, 0.00059793412219733, 0.00041321181925013661, 0.00083805032772943377, 0.00068122480297461152, 0.0010960444342344999, 0.00072463671676814556, 0.00053852092241868377, 0.00060236657736822963, 0.00081405660603195429, 0.00032434740569442511, 0.00023493744083680212, 0.00042329708230681717, 0.0011956306407228112, 0.00092815561220049858, 0.00046900697634555399, 0.00062265107408165932, 0.0013224646681919694, 0.000856951461173594, 0.00047519273357465863, 0.00049305002903565764, 0.00054907845333218575, 0.00040023858309723437, 0.0011591986985877156, 0.00074340164428576827, 0.00076601078035309911, 0.00018788188754115254, 0.00052730483002960682, 0.00065177731448784471, 0.00073667714605107903, 0.0013716255780309439, 0.0007596304640173912, 0.00053919758647680283, 0.00073293462628498673, 0.00036022771382704377, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { 1081, 16652, -27584, 5941, 21817, -1744, -758, -4204, 17622, -14284, 26400, 20628, -552, 20789, 31217, -17878, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00046786386519670486, 0.0003417853731662035, 0.00028085298254154623, 0.0002110630739480257, 0.00040028311195783317, 0.00027759865042753518, 0.000275583122856915, 0.00046458785072900355, 0.00020183293963782489, 0.00020259799202904105, 0.00029868647106923163, 0.00062353583052754402, 0.00036885510780848563, 0.00039284449303522706, 0.00052056618733331561, 0.00027352201868779957, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 3,31,-8,16,26,46,-2,9,20,-8,13,-8,-9,11,22,50,-10,-6,-21,-20,98,-47,22,-18,-34,-3,-16,-100,10,13,44,43,96,16,7,-27,-18,-5,0,-3,-18,-5,21,-14,1,-38,6,30,-13,6,20,-1,-40,-7,24,-17,30,29,7,-17,-54,39,-9,9,4,-11,53,1,4,25,17,-31,-63,-11,11,-11,-6,-85,14,-10,42,-18,-44,-41,10,-14,-5,19,-28,8,26,-16,21,27,-12,127, 
  /* [1][0][][] */ 60,-94,16,83,-24,-47,11,-37,29,-44,-5,18,10,-51,-22,-41,-109,-6,13,21,-29,-103,-33,44,89,-56,-74,26,-39,97,-11,51,7,1,-42,35,-34,-37,49,-45,-14,-86,24,-60,-58,16,45,1,9,60,5,-43,74,-108,40,-36,16,24,-4,-99,37,-77,18,-52,-23,-83,50,33,8,33,-5,25,-127,15,-32,50,16,46,37,-25,2,9,-58,26,-113,29,4,88,-116,21,61,-16,24,-12,32,-18, 
  /* [2][0][][] */ 12,19,60,1,48,-13,8,58,35,-26,-26,28,-42,43,60,-14,-4,-11,13,-3,-20,-41,13,-50,13,-31,-33,47,3,9,63,-35,44,-36,-12,64,5,97,-58,-9,-19,-48,18,54,-20,-48,-53,49,18,38,-4,-26,35,22,14,-68,-3,-24,33,16,-12,7,80,127,29,-39,22,-49,-11,13,54,-2,-28,-12,-19,6,18,49,-17,23,36,71,26,-20,15,20,16,14,-3,9,-21,-68,-19,-9,18,68, 
  /* [3][0][][] */ -22,-4,22,22,21,-12,3,2,-26,44,16,-5,7,-15,44,1,31,-40,-6,10,-12,-3,13,-10,16,3,14,30,23,-56,43,-10,51,-1,-15,62,19,8,-47,19,38,-71,28,-8,10,-4,8,30,-105,40,-4,29,-127,-33,-18,-51,44,-5,-38,56,9,26,24,28,10,-52,-7,30,49,2,46,40,-15,0,-13,4,-32,-42,25,-30,6,-5,-8,73,49,113,23,25,21,-17,1,-12,-36,-14,5,-46, 
  /* [4][0][][] */ -15,-2,39,-61,20,-21,-50,22,-37,-63,-22,8,17,72,-2,2,50,-17,2,-2,15,34,73,-10,-15,15,41,-26,25,-7,-34,2,-39,49,-9,12,-6,-55,-13,16,27,-15,-73,-24,28,6,-17,11,13,59,7,-27,11,23,-10,-12,-2,-41,25,64,-46,10,35,-31,44,-116,32,-33,-20,2,15,-3,-12,-4,-12,-8,4,47,52,15,14,-13,127,-19,41,-74,3,-2,65,42,16,11,-39,25,3,-21, 
  /* [5][0][][] */ -22,1,2,-7,16,-24,-26,127,50,-22,-27,-52,-63,51,51,7,-3,-52,15,-58,-53,13,-11,-12,45,25,20,74,60,27,21,72,-44,52,17,-34,-100,-122,-1,-9,-15,-34,-18,-8,42,5,-24,25,17,14,2,15,-23,-21,34,-4,-8,-40,0,35,-59,62,-8,-39,56,24,-43,31,-13,40,48,-24,38,32,25,-16,-4,5,2,98,21,-66,24,22,37,-19,50,-48,-1,-8,-1,-126,-19,-19,-3,-115, 
  /* [6][0][][] */ -22,2,-4,-72,-33,-15,-27,-39,16,34,3,14,30,-48,22,-7,13,-73,22,15,19,6,-65,47,73,7,-30,16,8,-1,-14,-25,-36,-48,-38,3,27,27,32,10,2,-12,-35,-15,-13,-25,31,-127,21,52,29,1,20,-7,-4,-33,44,-19,3,5,44,21,-25,-9,55,61,31,-14,20,-33,4,-25,6,8,55,3,-22,31,13,-17,-28,-4,64,-32,-12,49,43,-49,40,-15,-36,16,11,9,-30,2, 
  /* [7][0][][] */ 2,-4,13,-26,-23,17,-15,-50,31,-13,-8,-5,3,-75,38,-3,11,-26,-16,-20,-3,-4,-32,3,-25,5,0,-23,-28,-2,-2,-24,-9,-9,-21,-7,7,2,-30,8,11,-19,-33,25,-10,13,-8,78,-24,24,-9,-21,-5,9,15,-64,12,10,-19,2,20,-2,-15,-17,-28,58,11,-40,-4,-16,-9,38,-8,-16,-19,5,33,9,-10,-10,3,-15,37,11,-53,127,17,10,-44,-11,7,29,-11,16,5,-4, 
  /* [8][0][][] */ -50,39,-51,1,51,-45,1,28,5,60,-80,2,13,22,64,-32,3,45,-121,25,37,71,-5,-28,-19,-45,53,18,60,-89,4,-12,12,40,-28,77,-15,15,-85,77,55,-3,20,-120,-31,-19,22,-5,-34,49,59,67,-127,86,7,-26,-29,-37,-19,-4,-19,-71,22,-39,-89,31,17,-17,-24,-6,41,65,-46,19,37,4,-34,-101,-5,13,-1,31,14,24,-69,36,28,-13,14,22,3,32,30,-28,4,-28, 
  /* [9][0][][] */ 37,-58,30,-20,16,12,19,105,30,-38,-43,-14,-47,-29,-8,26,-8,7,7,-5,-39,43,27,-40,38,-4,57,16,-36,-49,-39,1,26,35,16,78,16,73,-78,42,20,-7,-7,-85,33,-18,32,-90,-40,14,-8,32,-21,11,26,-21,-42,0,31,-5,3,0,20,60,-36,127,44,75,-10,35,61,-7,-33,-33,-39,-12,71,5,-3,48,31,9,21,-38,3,83,-23,33,-77,32,-36,6,26,-18,35,-23, 
  /* [10][0][][] */ 32,68,3,25,97,-127,25,50,6,40,41,-17,-26,29,-10,-106,13,35,-53,39,-51,14,22,-34,-79,-30,-93,43,6,19,-19,77,-18,50,18,-35,90,-50,-41,19,-16,41,19,-7,-63,-35,-62,59,-16,-20,-16,2,-9,-8,5,5,3,-4,-22,12,-15,13,49,60,16,42,43,24,-6,40,39,50,-63,-38,-24,-35,3,9,-30,41,47,8,-77,-55,75,-56,114,1,-52,37,21,-50,100,28,15,-117, 
  /* [11][0][][] */ 58,28,-7,42,20,12,46,33,-27,-30,-45,-16,-19,17,20,8,-4,2,-110,3,18,12,16,9,-55,-21,0,27,-7,36,-13,16,-1,20,-7,47,7,5,-30,30,-3,-16,75,-123,31,-45,-33,-7,-127,18,11,-50,27,0,7,-21,-24,-59,28,9,-8,-7,10,35,-66,60,-39,6,-1,4,67,20,-64,-32,40,4,-8,-43,-65,8,6,-4,93,34,0,5,-7,-3,-4,33,-10,-9,-4,-11,0,29, 
  /* [12][0][][] */ -34,-5,-14,-7,-63,33,-16,-23,127,6,-13,0,9,-7,-44,-38,9,8,22,46,31,26,-22,-21,19,24,-1,-60,-60,10,29,-55,-17,-16,10,-29,-9,-14,70,-24,-19,8,2,16,7,27,20,-13,15,5,-51,7,2,-18,0,1,70,-15,21,0,5,8,-2,-35,15,15,-33,10,13,-2,-35,-50,19,16,-89,21,29,-16,10,-67,-14,-2,46,40,-25,-46,-39,-48,29,5,-4,50,-11,-27,-4,10, 
  /* [13][0][][] */ 11,-1,-58,7,17,0,-14,-21,15,12,10,-1,23,-33,13,-20,18,-63,-46,14,-1,-32,2,-2,2,10,-22,-25,-20,-25,-9,20,-22,4,6,19,16,-20,12,15,7,7,-5,50,18,8,7,-127,6,-17,7,16,-7,3,4,21,-8,29,6,12,8,1,-25,-22,7,-12,-19,-84,8,12,-63,-32,1,49,-22,31,-29,-10,17,5,19,0,-21,24,3,20,24,12,0,10,16,12,0,24,-15,-1, 
  /* [14][0][][] */ -82,-66,-2,31,30,-24,-33,18,18,-4,5,36,65,-10,-100,26,88,25,-24,28,20,-25,30,26,-127,1,17,-9,-30,-54,1,3,-31,-25,49,-57,52,76,0,14,-36,44,-4,-15,16,91,64,16,-70,38,7,18,-54,-27,9,-7,-2,29,51,34,44,27,17,79,-18,-31,-48,27,22,79,-111,-64,-33,-10,13,12,-29,46,76,-33,43,35,18,30,15,9,49,49,33,21,43,15,12,35,-19,-15, 
  /* [15][0][][] */ 88,-28,22,26,-6,109,13,-85,-6,50,-13,31,-64,-41,-21,30,53,38,36,-8,26,20,-98,28,6,14,41,-24,34,11,-30,-50,-11,-110,47,42,36,-35,-76,-120,-12,27,29,39,8,50,-3,-81,60,-24,-76,11,50,-127,64,-83,10,-40,-10,12,-106,-39,-12,8,63,-32,-33,35,-15,89,-88,49,55,24,13,-15,5,-41,42,2,-16,13,45,100,-40,9,34,-30,12,-17,60,20,-89,59,13,-17, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.019884213805198669, 0.014525878243148327, 0.011936252005398273, 0.0089701805263757706, 0.017012031748890877, 0.011797942221164703, 0.011712281964719296, 0.019744982942938805, 0.0085779000073671341, 0.0086104143410921097, 0.012694175355136395, 0.026500273495912552, 0.015676341950893402, 0.016695890575647354, 0.022124063223600388, 0.011624685488641262, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 9002, -10413, 2574, 54615, -1189, -3911, -10188, 3259, -3006, 988, 4771, -410, 1744, -6624, 6886, -7761, -1151, 15678, 23576, 1876, 4134, -3216, 235, -237, 13991, -125, -370, -3118, -8293, -8523, 10297, -8763, -3403, -98, -756, 13279, 2674, -5726, 20171, -644, -209, 3167, -7991, -7081, -7795, 69951, -1588, 14206, 50129, -15211, -537, 7910, 7946, -342, -5432, 1956, -14914, 1064, 2099, -9540, -1632, -1359, -11064, -1524, 1724, 11790, 32192, 18452, -11348, 245, -13711, -955, 38927, 7941, -1466, 678, 20499, 31306, -1619, -12543, -1410, -6619, 1317, -2732, 105, 724, 2570, -906, -21, -4119, 329, 1301, -152, -2318, 150, 45379, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00022210867609828711, 0.00010429928806843236, 0.00046248067519627512, 3.7351488572312519e-05, 0.00018015450041275471, 0.00023722737387288362, 0.00031506732921116054, 8.8299595518037677e-05, 0.00014580191054847091, 0.00049038970610126853, 0.00019511405844241381, 0.00042996686534024775, 0.00010814318375196308, 0.00043944737990386784, 0.00015140059986151755, 0.00011280748003628105, 0.00011182238085893914, 0.00026371589046902955, 6.4399908296763897e-05, 0.00025041805929504335, 4.3506926886038855e-05, 0.00016928253171499819, 0.00013901898637413979, 0.00036822960828430951, 0.00024819362442940474, 0.00025075822486542165, 0.00015759737289045006, 0.00019657313532661647, 8.9660075900610536e-05, 9.4727634859737009e-05, 9.9183591373730451e-05, 0.00021152920089662075, 0.00011643279867712408, 0.0001788341614883393, 0.00022642759722657502, 0.00017748355458024889, 0.00042276072781533003, 0.00010938040941255167, 5.8587673265719786e-05, 0.00017537309031467885, 0.0001927560952026397, 0.00029511190950870514, 0.00043189784628339112, 0.00016152203897945583, 0.00019338428683113307, 7.1154325269162655e-05, 0.00022486902889795601, 0.00026084610726684332, 5.5277265346376225e-05, 0.0001517455093562603, 0.00016466956003569067, 0.00016589406004641205, 0.00023066070571076125, 0.00039439959800802171, 0.00033076517865993083, 0.00068410090170800686, 0.00024623703211545944, 0.0003399400447960943, 0.00010111323354067281, 9.6687181212473661e-05, 0.00032991968328133225, 0.00012702569074463099, 0.0003211846633348614, 0.00013476976891979575, 0.00023286235227715224, 0.00026726399664767087, 8.0206998973153532e-05, 8.0220626841764897e-05, 0.00039387797005474567, 0.00020280887838453054, 0.00015135361172724515, 7.874054426793009e-05, 0.00014229005319066346, 0.00014947669114917517, 0.00018708819698076695, 0.00023777699971105903, 0.00047519843792542815, 5.3854415455134585e-05, 0.00024094678519759327, 0.00014591253420803696, 0.0001705160248093307, 0.0003210867871530354, 0.00015818078827578574, 0.00011522886052262038, 0.00014513597125187516, 0.0001091426020138897, 0.0001613790518604219, 0.00023037022037897259, 0.00019734552188310772, 0.00010685278539313003, 0.00023312546545639634, 0.00012649990094359964, 0.00014433116302825511, 0.00038139644311740994, 0.0079940799623727798, 8.2597704022191465e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -17,5,-19,110,-20,23,-64,-58,19,-6,95,-9,3,-8,-8,65,0,18,-39,6,83,3,37,-36,1,17,45,47,30,14,20,47,-4,30,7,-15,2,55,-76,-27,16,9,27,13,-82,-56,28,-8,-13,-20,-5,-9,48,4,-11,4,-3,-33,24,-28,32,-3,127,32,-16,-13,7,-47,63,38,-10,0,87,-38,75,1,16,-127,30,62,0,22,127,-14,40,30,-27,-18,47,-4,-14,76,1,22,-4,11, -48,13,-7,10,52,-12,-11,-127,39,13,-127,-7,-17,-9,2,107,16,-30,-15,-15,80,-94,127,25,-59,-31,-100,-17,34,40,-52,17,119,14,-10,-2,-25,127,-62,-127,7,-19,-30,14,45,-127,127,-46,-79,56,52,6,38,-64,30,55,39,44,-102,84,127,33,6,-18,43,-36,-92,-4,36,-28,-12,49,-48,-48,110,-6,-29,-56,-32,65,-68,56,-26,6,-9,46,55,-39,-21,54,-12,66,-127,-30,20,-127, -1,-1,-22,-82,9,16,36,19,-1,0,-5,59,3,-13,-13,10,-13,17,-23,17,13,31,23,-37,-1,-33,12,17,-1,9,43,-81,47,20,14,-27,10,9,-45,-21,5,0,-17,7,22,-33,24,-1,6,-7,7,-7,3,6,-4,8,-6,50,6,-3,12,-20,8,-14,-27,-18,16,-46,-104,-5,52,-8,-127,-23,-7,16,9,-11,10,15,-19,16,-60,-4,-44,23,23,33,-24,-14,27,-10,15,10,-1,-47, 
  /* [0][1][][] */ -40,56,-16,40,-86,-15,-10,-44,25,91,-49,-21,-33,-25,-9,70,127,-23,-92,-14,58,-127,-25,15,-33,-50,-127,-6,41,38,-53,29,-119,-74,-58,4,65,0,-46,49,-21,85,1,-5,36,-54,-9,-33,127,49,0,20,45,11,-43,-16,27,14,-125,127,-35,-94,22,127,-60,-34,-78,127,-37,127,-28,56,-31,-55,42,5,-36,-66,127,51,127,41,1,-1,127,26,-96,48,-34,-34,-99,32,95,105,26,-59, 127,127,127,127,-44,-127,127,25,127,-127,18,-127,-112,127,127,127,-14,-127,-60,-127,127,22,-67,127,127,127,-59,-127,127,127,-127,127,-4,-127,-119,127,-127,-46,120,113,-127,-127,127,127,127,-126,-103,127,-16,127,-127,-127,-127,127,127,-127,127,-127,-38,41,-108,-27,-64,-66,127,127,-58,124,127,-106,-127,127,-43,127,-127,-127,-127,127,-74,127,-42,127,89,127,-37,-127,-28,-104,-127,-122,-19,-127,-20,-127,-127,120, -23,70,-35,3,127,63,-19,51,9,23,-15,-4,-28,-30,-13,-12,-98,-23,-127,37,34,81,-14,-117,-32,-42,117,72,14,39,69,7,127,-46,127,-5,52,8,-102,18,34,21,-24,0,-24,-60,-10,-43,80,16,-11,39,-6,-4,-74,-14,22,19,127,-83,2,127,0,-33,-109,-27,-74,101,15,-16,126,33,-18,-54,20,47,-31,-3,-42,4,-46,7,39,20,-92,34,127,-46,30,-23,127,-14,-110,39,31,21, 
  /* [0][2][][] */ -5,-38,-21,-67,-7,14,37,31,-3,10,-29,52,26,-34,-10,12,44,1,9,24,-17,31,-16,-25,1,-27,7,2,-8,-5,46,-73,-32,69,-29,-26,31,-32,-67,20,7,9,-37,18,14,-90,-8,-2,-11,19,16,-10,7,1,-21,10,2,48,-57,36,-4,-14,5,19,-8,-11,13,-50,-57,14,-27,-12,-114,-29,5,14,12,-8,56,16,24,21,-59,16,14,30,-22,17,4,29,20,-10,21,39,-6,-29, -26,-7,-25,27,-45,72,-24,65,6,-5,51,-13,127,-4,-16,-19,3,-44,-58,23,-26,78,-44,-113,-45,-49,95,67,13,46,53,-4,-119,63,-12,-23,-29,-24,-127,-1,43,-14,-17,34,-22,-53,-18,-49,-63,33,70,20,-11,-80,34,54,22,28,76,-50,21,-57,-8,0,18,-26,-127,-50,-12,-26,-57,20,37,-45,-28,-9,-49,26,-55,2,51,30,16,12,6,62,-97,127,15,127,-33,-19,116,-22,46,82, -9,-31,-23,34,12,60,-43,13,7,-6,-4,14,12,-48,-10,-22,-40,-4,15,19,-21,5,-19,5,-3,22,-5,59,0,-4,32,26,20,45,23,-26,-7,-23,-38,12,10,-14,20,9,-70,-44,-11,3,-2,-9,1,-8,-9,8,-13,-2,1,-50,14,-28,-19,50,6,-28,-12,-3,18,-45,43,6,69,-18,42,-54,-14,21,8,14,-4,23,-32,25,86,-14,-19,57,40,-9,117,12,-1,-19,16,-19,-6,-47, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0094396183267235756, 0.0044327196665108204, 0.019655428826808929, 0.0015874381642788649, 0.0076565663330256939, 0.010082162916660309, 0.013390361331403255, 0.0037527328822761774, 0.0061965812928974628, 0.020841563120484352, 0.0082923471927642822, 0.018273591995239258, 0.004596085287630558, 0.018676513805985451, 0.0064345253631472588, 0.0047943177632987499, 0.0047524510882794857, 0.011207925155758858, 0.0027369961608201265, 0.010642767883837223, 0.0018490443471819162, 0.0071945074014365673, 0.0059083066880702972, 0.015649758279323578, 0.010548229329288006, 0.010657223872840405, 0.0066978884860873222, 0.0083543583750724792, 0.0038105531129986048, 0.0040259244851768017, 0.0042153024114668369, 0.0089899906888604164, 0.0049483939073979855, 0.0076004518195986748, 0.0096231726929545403, 0.0075430511496961117, 0.017967330291867256, 0.0046486672945320606, 0.0024899761192500591, 0.0074533564038574696, 0.0081921340897679329, 0.012542256154119968, 0.018355658277869225, 0.0068646864965558052, 0.0082188323140144348, 0.0030240586493164301, 0.009556933306157589, 0.011085959151387215, 0.002349283779039979, 0.0064491839148104191, 0.0069984560832381248, 0.0070504974573850632, 0.0098030799999833107, 0.016761982813477516, 0.014057519845664501, 0.029074288904666901, 0.010465073399245739, 0.014447451569139957, 0.0042973123490810394, 0.004109205212444067, 0.014021585695445538, 0.0053985915146768093, 0.013650348410010338, 0.0057277148589491844, 0.0098966499790549278, 0.011358719319105148, 0.0034087973181158304, 0.0034093766007572412, 0.016739813610911369, 0.008619377389550209, 0.0064325281418859959, 0.0033464732114225626, 0.006047327071428299, 0.0063527589663863182, 0.007951248437166214, 0.010105522349476814, 0.020195933058857918, 0.0022888125386089087, 0.010240238159894943, 0.0062012826092541218, 0.007246930617839098, 0.01364618819206953, 0.0067226830869913101, 0.0048972265794873238, 0.0061682788655161858, 0.0046385605819523335, 0.0068586096167564392, 0.0097907343879342079, 0.008387184701859951, 0.0045412434265017509, 0.0099078323692083359, 0.0053762458264827728, 0.0061340741813182831, 0.016209349036216736, 0.33974838256835938, 0.0035104022826999426, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 21834, 1711, 18032, -668, 6329, 6087, 11211, 12187, -1253, 14557, 8782, 3117, 7111, 38298, 489, -2404, 8090, 9833, 1645, -283, -803, 22720, 6932, 4337, 10206, 5862, 4831, 5056, 302, 149, 10163, 14522, 12301, 1758, 7770, -359, 14333, 7456, 928, 5740, 1002, 20164, 17339, 4740, 3831, 14483, 17077, 10581, 4845, 4333, 246, -1702, 17637, 9103, 9261, 23011, -350, 12213, 2874, 4164, 15953, 6051, 2166, 6671, 9597, 8965, 4884, -729, 19768, 10019, 14440, -1065, -1552, 6480, 1978, 5505, 31266, 12003, 25173, -1647, 6034, -6125, -2830, 855, 8490, 4619, 12640, 5461, 8470, 5568, 7194, 4132, 22438, 21686, -15485, 12991, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00012263994722161442, 0.00020594664965756238, 7.7685806900262833e-05, 0.00075222546001896262, 0.00024028736515901983, 0.00015956567949615419, 0.00028608713182620704, 0.00029347982490435243, 0.00033153709955513477, 0.00012706252164207399, 0.0001759861916070804, 0.0002790853613987565, 0.00038988576852716506, 0.00012236495967954397, 0.00022341462317854166, 0.00025717332027852535, 0.00026513633201830089, 0.00023009999131318182, 0.00022756442194804549, 0.00055676483316347003, 0.00046198893687687814, 0.00010927833500318229, 0.00020343816140666604, 0.00017795240273699164, 0.00016863690689206123, 0.00035742743057198822, 0.00029568100580945611, 0.00017069900059141219, 0.00029823192744515836, 0.00038147205486893654, 0.00014645348710473627, 0.00013079964264761657, 0.00015399858239106834, 0.00062398513546213508, 0.00020775571465492249, 0.00042607885552570224, 0.00015522082685492933, 0.00035081204259768128, 0.0004076470504514873, 0.00018319330411031842, 0.00055010349024087191, 9.3974587798584253e-05, 0.00012135267752455547, 0.00016372842947021127, 0.00026289751986041665, 0.00022246153093874454, 0.0001655183732509613, 0.0001496651821071282, 0.00034132756991311908, 0.00020564520673360676, 0.00050842779455706477, 0.00038965558633208275, 0.00015268940478563309, 0.00017624256724957377, 0.00025638067745603621, 7.9815661592874676e-05, 0.0002676566073205322, 0.00014131373609416187, 0.00026378195616416633, 0.00039729062700644135, 0.00010418744932394475, 0.00021317096252460033, 0.00045646002399735153, 0.00039764080429449677, 0.00012412258365657181, 0.00013848248636350036, 0.00041382736526429653, 0.00052286300342530012, 0.00013763525930698961, 0.00011757401080103591, 0.00012586108641698956, 0.00039881991688162088, 0.00026489963056519628, 0.00019258340762462467, 0.00019306845206301659, 0.00024459121050313115, 7.8738485171925277e-05, 0.00036863339482806623, 6.8383415054995567e-05, 0.00070202985079959035, 0.00018104077025782317, 0.00033190674730576575, 0.00012526406499091536, 0.0003621546202339232, 0.00018455344252288342, 0.00034735168446786702, 0.00012687362323049456, 0.00025736237876117229, 0.00018977154104504734, 0.00028951969579793513, 0.00018482262385077775, 0.0004128015716560185, 9.3729613581672311e-05, 0.00012895301915705204, 0.00019213353516533971, 0.00025194839690811932, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ -24,-30,69,92,-9,17,50,-14,104,-41,-83,-111,90,127,1,-106, 
  /* [1][0][][] */ 0,88,-52,38,47,-46,-33,15,47,66,-76,127,48,-34,113,-54, 
  /* [2][0][][] */ 55,-46,-76,2,-51,33,-107,35,-126,-127,-27,37,-39,-111,99,-110, 
  /* [3][0][][] */ 127,108,6,39,-120,-15,-34,9,-1,-17,101,-82,-35,92,-32,-62, 
  /* [4][0][][] */ -24,-47,6,1,-40,-5,-27,37,-49,-59,-9,-19,-6,-127,68,4, 
  /* [5][0][][] */ 88,-90,-54,8,-28,-28,1,4,-4,-4,-127,-4,62,-7,-13,18, 
  /* [6][0][][] */ -127,-38,-71,75,-31,8,15,10,-74,-36,-29,-17,50,36,-10,88, 
  /* [7][0][][] */ -27,38,-117,32,24,-120,-43,34,-10,-127,54,-46,-27,21,6,-13, 
  /* [8][0][][] */ 22,-24,-1,-6,-5,38,-62,-58,-12,6,-58,13,-127,10,-23,17, 
  /* [9][0][][] */ 25,-61,5,127,-27,5,-9,-37,111,-65,-10,-55,-27,10,-32,22, 
  /* [10][0][][] */ -84,-20,-73,-81,96,-9,23,40,62,-115,-58,-5,58,-127,-92,43, 
  /* [11][0][][] */ 60,-36,-127,7,84,-18,-46,31,2,-44,-53,1,-21,28,-30,22, 
  /* [12][0][][] */ 82,-70,25,28,-6,-21,-51,17,29,-2,-127,-12,-34,-4,-6,16, 
  /* [13][0][][] */ 44,-88,4,-27,33,10,-127,-106,-7,-53,-13,45,-39,-64,-34,14, 
  /* [14][0][][] */ -58,29,-127,-73,72,-113,27,-64,-5,5,-22,-111,50,104,-33,43, 
  /* [15][0][][] */ 37,15,67,87,35,-43,-31,-6,45,-43,-98,-20,-127,-30,-3,71, 
  /* [16][0][][] */ -127,86,-68,15,-2,28,55,19,-43,9,74,19,7,-19,-9,-24, 
  /* [17][0][][] */ -10,-16,-18,-39,-25,13,30,59,-17,127,6,26,-26,55,67,5, 
  /* [18][0][][] */ -9,127,-25,-34,40,-8,84,-59,5,87,-44,66,6,-66,25,-90, 
  /* [19][0][][] */ 5,-30,29,45,0,43,-33,12,28,-23,-47,-8,-127,7,12,20, 
  /* [20][0][][] */ 60,-51,-6,-76,-55,35,18,-47,-25,42,-127,-18,28,-20,56,27, 
  /* [21][0][][] */ 19,-25,127,53,-53,63,40,17,-14,56,-38,-2,24,105,45,5, 
  /* [22][0][][] */ 19,-11,86,27,17,-20,36,127,24,45,12,55,-4,16,4,-17, 
  /* [23][0][][] */ -10,33,-59,-21,46,-127,44,18,-28,-11,-18,-11,-60,17,-1,60, 
  /* [24][0][][] */ 33,-75,13,-110,58,-43,-29,-28,14,18,57,79,-40,65,127,32, 
  /* [25][0][][] */ -127,-58,-43,-28,-34,-23,43,-30,-69,17,-61,-40,71,12,3,13, 
  /* [26][0][][] */ -8,-11,60,-34,6,13,-35,40,-72,-38,10,24,18,-127,40,4, 
  /* [27][0][][] */ -127,16,-11,60,18,-44,-8,52,76,-23,115,12,22,-8,14,-32, 
  /* [28][0][][] */ -19,-12,44,48,-4,15,31,127,38,27,-33,-3,-113,18,-38,16, 
  /* [29][0][][] */ -20,41,26,-32,33,-24,6,-23,-127,19,-37,0,6,14,-61,-6, 
  /* [30][0][][] */ 5,19,-127,-60,27,-29,47,-3,-23,2,10,-46,-11,-34,-1,13, 
  /* [31][0][][] */ 125,-10,-127,-19,114,4,-14,59,-48,-39,-118,-42,38,-20,-66,73, 
  /* [32][0][][] */ -127,17,17,36,-17,30,-34,17,27,-1,83,10,-18,49,-18,-19, 
  /* [33][0][][] */ 12,-4,127,-5,-45,16,0,-38,-10,12,7,15,-11,23,31,-11, 
  /* [34][0][][] */ -44,-14,-13,-106,51,7,-7,-31,8,-127,-43,-103,-1,-5,28,-36, 
  /* [35][0][][] */ 9,-32,-17,31,-14,-13,-3,-33,-127,-11,10,-33,5,115,-16,-38, 
  /* [36][0][][] */ -79,42,-14,-16,-19,-30,39,80,-37,28,127,-35,36,23,76,-3, 
  /* [37][0][][] */ -32,33,127,-42,-51,-91,32,-59,60,26,-19,2,17,-60,74,4, 
  /* [38][0][][] */ 2,3,32,51,67,-98,-29,52,1,19,50,43,127,12,-22,1, 
  /* [39][0][][] */ -43,28,-34,-49,-38,-48,35,58,-54,-127,-11,-81,0,37,108,38, 
  /* [40][0][][] */ 57,-14,2,-10,-2,51,-28,8,4,-11,-19,3,127,1,-12,-20, 
  /* [41][0][][] */ -37,-9,-37,-127,42,-24,5,-83,31,47,82,-51,0,-47,17,55, 
  /* [42][0][][] */ 47,28,-22,100,-101,-1,-104,8,-54,-58,76,-70,-39,127,-61,88, 
  /* [43][0][][] */ 9,79,-40,127,-4,21,31,-89,-19,74,16,27,-16,-51,52,39, 
  /* [44][0][][] */ 34,22,-127,96,89,109,-53,86,-4,-3,51,31,0,-37,-109,-24, 
  /* [45][0][][] */ -11,-4,20,-127,-10,20,92,34,5,56,-30,22,26,-63,14,-56, 
  /* [46][0][][] */ -11,64,19,-49,-16,31,-34,74,49,-46,-39,-21,19,127,103,-16, 
  /* [47][0][][] */ 0,-33,-30,-38,-47,26,-73,47,-14,-38,17,7,9,-127,50,35, 
  /* [48][0][][] */ 32,-10,9,-127,7,-1,10,17,13,-17,15,8,-1,51,14,46, 
  /* [49][0][][] */ 26,-38,8,127,102,12,-8,32,-65,-5,26,55,13,50,104,-6, 
  /* [50][0][][] */ 8,8,4,-27,39,80,-5,-94,8,0,127,28,93,-24,8,-33, 
  /* [51][0][][] */ 61,11,30,51,-11,-28,-83,30,47,-9,-30,127,48,82,59,-83, 
  /* [52][0][][] */ -51,11,87,-10,-18,-12,1,-57,-32,-24,18,38,11,84,-127,35, 
  /* [53][0][][] */ -7,-40,-57,-127,-80,-2,-14,-19,9,14,23,-16,22,-5,116,14, 
  /* [54][0][][] */ -28,30,-35,-42,1,51,-27,27,96,-35,-25,-54,-3,127,46,0, 
  /* [55][0][][] */ -48,-55,-15,6,28,-60,-60,-127,-9,-57,80,-20,-40,-95,-37,-49, 
  /* [56][0][][] */ 29,46,66,67,19,-8,14,127,32,-11,24,-6,63,-1,-59,44, 
  /* [57][0][][] */ 78,-72,46,-71,-113,-127,20,-66,-38,28,-52,-45,27,-43,92,-70, 
  /* [58][0][][] */ 122,91,18,109,-115,-34,-1,42,-60,6,127,-39,-80,-91,-21,-89, 
  /* [59][0][][] */ 127,10,-2,-12,-14,-9,0,14,-21,24,-116,-27,-43,-7,-16,-8, 
  /* [60][0][][] */ -127,45,-17,-8,13,13,24,5,24,17,103,-14,-55,9,25,-31, 
  /* [61][0][][] */ -88,39,20,-39,36,-14,-57,-127,59,-86,91,-38,52,-29,-43,-5, 
  /* [62][0][][] */ 6,-40,-48,39,60,31,-1,97,23,-16,8,16,-53,4,-127,-6, 
  /* [63][0][][] */ -28,9,127,-40,-25,-39,42,-7,17,29,-20,15,-3,-61,5,5, 
  /* [64][0][][] */ -18,95,-75,96,-37,-22,90,-83,79,127,-19,25,30,-124,-16,50, 
  /* [65][0][][] */ 51,42,15,9,91,46,-64,-127,-26,-127,-82,-63,23,-20,75,46, 
  /* [66][0][][] */ -127,-36,-10,-2,-34,9,2,-24,-65,-23,-50,54,38,11,27,84, 
  /* [67][0][][] */ -4,-40,-3,127,15,-14,-16,17,56,-13,-6,-64,22,-42,-84,-3, 
  /* [68][0][][] */ 25,28,-6,127,-41,-12,10,-11,-42,27,-1,-16,-4,-42,-41,-43, 
  /* [69][0][][] */ 102,50,47,57,86,-20,92,-127,22,114,67,25,7,-64,14,29, 
  /* [70][0][][] */ -41,-62,127,-76,122,47,36,47,106,92,81,-18,-97,15,-20,18, 
  /* [71][0][][] */ -24,57,-4,78,27,-127,-29,75,19,-91,9,-15,8,-47,-72,-6, 
  /* [72][0][][] */ -127,-66,-10,35,16,20,-33,15,-53,-55,-102,21,33,33,0,106, 
  /* [73][0][][] */ 5,55,70,84,127,-57,40,-17,101,97,-14,100,32,115,-92,5, 
  /* [74][0][][] */ 80,-32,6,-20,-41,-67,71,-23,-34,-25,-127,0,-99,-14,16,88, 
  /* [75][0][][] */ -8,-35,-41,127,-74,-5,-36,-4,-67,1,-40,-17,14,-23,-23,-22, 
  /* [76][0][][] */ 18,-22,-3,63,20,29,-41,-92,12,-127,-2,44,5,2,24,-57, 
  /* [77][0][][] */ 127,-22,-10,27,-55,-18,-16,-15,43,-2,-17,12,18,-11,-9,38, 
  /* [78][0][][] */ -17,-28,84,5,12,-26,-127,49,106,-38,-119,-36,25,120,102,-5, 
  /* [79][0][][] */ 10,22,38,21,41,58,-76,-67,14,-57,86,-51,127,-33,-11,-62, 
  /* [80][0][][] */ -52,-80,-52,89,-33,90,61,-11,-127,-16,-112,-5,72,-90,-25,24, 
  /* [81][0][][] */ 58,-11,-45,44,127,79,-42,-43,-9,-118,-31,-73,-20,-26,-63,26, 
  /* [82][0][][] */ 91,63,-6,65,-127,-19,-103,-11,-92,-9,79,-60,-44,84,-19,-47, 
  /* [83][0][][] */ 127,27,0,-37,29,-27,-4,17,20,30,98,-34,-71,-60,-32,-73, 
  /* [84][0][][] */ 37,-48,-46,-16,54,20,-27,-127,-26,-56,14,-6,21,9,21,-43, 
  /* [85][0][][] */ -26,-11,-60,-47,-19,-60,39,86,-9,127,-18,-78,17,39,94,-12, 
  /* [86][0][][] */ 121,-69,-19,-10,-1,-91,-24,-50,-34,-19,-127,-26,-14,-30,-33,41, 
  /* [87][0][][] */ -5,63,26,-26,-35,42,-102,27,-19,-61,-7,11,-18,-127,54,8, 
  /* [88][0][][] */ -88,-65,-87,-11,83,32,2,-127,-5,-53,-38,-16,115,2,-65,-2, 
  /* [89][0][][] */ -28,6,92,-97,94,-36,-41,113,127,-76,8,18,-34,62,27,-33, 
  /* [90][0][][] */ 4,25,-97,67,95,-12,126,-127,43,86,-62,8,0,27,31,-75, 
  /* [91][0][][] */ -7,-17,-73,-4,-31,-127,19,4,42,6,-57,-15,52,-26,17,14, 
  /* [92][0][][] */ 11,60,127,47,61,11,52,0,41,120,-26,-39,39,70,5,-10, 
  /* [93][0][][] */ 127,-43,-1,-29,17,-92,3,29,-30,94,-85,4,-18,23,-10,39, 
  /* [94][0][][] */ 26,-20,42,116,112,-47,20,79,32,22,-45,53,16,127,13,-101, 
  /* [95][0][][] */ -76,48,13,40,16,44,16,0,-3,1,127,-23,-30,19,-36,-24, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00045696165761910379, 0.00076736597111448646, 0.00028946061502210796, 0.0028028239030390978, 0.00089532090350985527, 0.00059454847360029817, 0.0010659728432074189, 0.0010935183381661773, 0.0012353212805464864, 0.00047344036283902824, 0.00065573200117796659, 0.0010398839367553592, 0.0014527309685945511, 0.00045593702816404402, 0.00083245238056406379, 0.00095823872834444046, 0.00098790926858782768, 0.00085736234905198216, 0.00084791472181677818, 0.0020745294168591499, 0.001721390406601131, 0.0004071757139172405, 0.00075801921775564551, 0.00066305819200351834, 0.00062834826530888677, 0.0013317897683009505, 0.0011017200304195285, 0.00063603173475712538, 0.0011112248757854104, 0.0014213810209184885, 0.00054569193162024021, 0.00048736503231339157, 0.00057380524231120944, 0.002324995119124651, 0.00077410659287124872, 0.0015875878743827343, 0.00057835940970107913, 0.0013071405701339245, 0.0015189101686701179, 0.00068258604733273387, 0.0020497089717537165, 0.00035015330649912357, 0.00045216522994451225, 0.00061005906900390983, 0.00097956729587167501, 0.00082890113117173314, 0.00061672850279137492, 0.00055765884462743998, 0.0012718010693788528, 0.00076624279608950019, 0.0018944236217066646, 0.0014518732205033302, 0.00056892720749601722, 0.00065668730530887842, 0.00095528527162969112, 0.00029739653109572828, 0.00099729991052299738, 0.00052654097089543939, 0.00098286278080195189, 0.0014803217491135001, 0.00038820685585960746, 0.00079428404569625854, 0.0017007894348353148, 0.0014816265320405364, 0.00046248603030107915, 0.00051599164726212621, 0.0015419382834807038, 0.001948209828697145, 0.00051283481298014522, 0.00043808575719594955, 0.00046896372805349529, 0.0014860199298709631, 0.00098702730610966682, 0.00071757397381588817, 0.00071938126347959042, 0.00091135728871449828, 0.00029338293825276196, 0.0013735436368733644, 0.00025479949545115232, 0.0026157931424677372, 0.0006745656137354672, 0.0012366985902190208, 0.00046673923498019576, 0.0013494035229086876, 0.00068765395553782582, 0.0012942471075803041, 0.00047273651580326259, 0.00095894309924915433, 0.00070709682768210769, 0.0010787626961246133, 0.00068865693174302578, 0.0015381161356344819, 0.00034924052306450903, 0.00048048445023596287, 0.00071589770959690213, 0.00093877047766000032, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -38711, 4471, 3609, -6796, -186, -10796, -7483, -34211, 2613, 31412, 30153, -14509, -8655, -23689, 42075, -40402, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00061300111701712012, 0.00065591925522312522, 0.001015951856970787, 0.00094725709641352296, 0.00090543675469234586, 0.0007600881508551538, 0.0006946530775167048, 0.00058465794427320361, 0.00054780923528596759, 0.0005782901425845921, 0.0006710923626087606, 0.00037952815182507038, 0.000858026382047683, 0.001235310104675591, 0.00047799060121178627, 0.00045942893484607339, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -17,-6,-6,16,16,-1,11,99,-44,10,38,-10,15,-2,-18,15,-11,-13,-6,1,53,-2,10,127,-12,93,19,-13,23,-25,27,-30,-28,44,20,-50,5,29,26,-13,-83,-8,8,37,36,22,-127,-53, 
  /* [1][0][][] */ -48,-5,36,-5,-32,12,-6,66,-77,-47,-1,-48,-31,-13,-12,-4,-34,105,-27,13,1,10,-34,-26,23,-43,30,29,-51,-84,-39,34,-24,-11,51,-22,-2,-55,9,18,-30,-23,127,5,35,4,17,-2, 
  /* [2][0][][] */ -27,-2,-7,-38,-7,-51,2,-16,1,15,16,28,11,15,-3,9,-16,-17,-23,-25,-6,11,-8,-127,-13,70,6,11,-4,-14,-4,-4,-5,42,10,-13,10,3,25,4,-40,6,-23,-10,-7,-4,16,4, 
  /* [3][0][][] */ -8,47,3,-34,-1,-6,4,-5,-17,-6,1,34,-127,11,-22,2,-1,7,-14,1,-29,-2,13,17,-6,-9,-11,24,-18,22,12,10,5,2,19,26,-7,29,40,9,9,-5,28,-30,8,-7,9,22, 
  /* [4][0][][] */ 34,-27,5,12,17,29,18,-21,-27,8,-1,-22,2,30,7,21,16,-7,-67,19,-19,-5,8,63,5,-14,23,45,8,-75,12,8,1,-26,31,-127,20,33,-3,19,-20,10,8,-26,-18,-23,10,4, 
  /* [5][0][][] */ 22,0,-21,59,-10,8,12,30,-4,10,42,10,4,45,3,14,-18,24,25,5,9,1,5,-33,6,-50,-1,-20,12,-14,6,0,56,-127,-2,28,-12,-22,22,3,-97,67,24,-4,-19,-5,-100,-20, 
  /* [6][0][][] */ 22,-4,5,1,-17,-4,4,-15,-2,6,5,10,-12,17,10,2,0,-10,127,9,4,9,25,-42,7,9,34,-21,-4,-2,-1,-4,-5,-12,32,-47,6,-46,65,19,-9,-14,-4,6,-12,6,10,-13, 
  /* [7][0][][] */ -48,2,-10,22,-30,75,-13,36,-1,20,4,127,59,15,18,-9,8,-29,-17,-19,-42,1,-29,35,12,-32,-37,-20,-13,3,-13,-4,-1,1,-14,-10,20,-48,68,18,2,21,-49,-47,26,-11,7,9, 
  /* [8][0][][] */ -41,-48,7,0,5,11,3,27,-1,-67,8,53,50,2,22,14,-12,56,-21,14,-45,13,-16,-17,-8,3,14,38,-19,115,-12,30,22,-2,-14,-127,-102,57,19,46,12,2,99,-26,9,27,27,27, 
  /* [9][0][][] */ -26,0,-7,14,-2,-30,-11,1,57,-46,8,62,-54,-5,18,-5,-3,18,-30,-24,47,27,-12,-28,-8,-6,64,-16,11,22,19,2,3,26,80,-122,-13,-127,-111,15,-30,22,43,12,13,14,-7,-38, 
  /* [10][0][][] */ -2,4,-38,-127,28,78,-12,-11,-3,31,12,0,43,-37,-8,19,41,-37,55,-19,35,-23,31,44,-44,-91,21,-27,45,27,31,-18,-34,-65,19,-7,19,-30,-1,-38,-23,-64,-3,11,28,6,24,-40, 
  /* [11][0][][] */ -1,52,-1,59,15,-56,-64,-8,10,64,-3,6,-12,78,-19,-87,13,41,-1,-27,-74,-115,-5,-3,16,-39,54,2,20,-43,18,-96,44,-14,-45,-113,84,-5,21,-127,1,89,67,-100,-5,-60,51,28, 
  /* [12][0][][] */ 121,-7,-11,31,11,25,0,109,26,-12,-55,-21,-4,11,0,-10,-15,2,0,-1,-1,-1,6,19,7,16,-13,-3,-1,11,-14,4,5,-71,-3,10,-24,-20,-18,-4,-22,-68,13,-127,-77,-1,86,-24, 
  /* [13][0][][] */ 4,4,-1,6,2,-11,1,2,-4,5,8,24,-7,11,14,-5,2,-2,11,5,9,-9,12,-5,-2,4,13,127,9,-8,6,-9,4,-2,-34,21,13,-5,5,-20,-19,-1,3,2,0,-8,-11,-11, 
  /* [14][0][][] */ 53,-32,34,-60,60,12,47,-96,-52,-65,-8,127,-71,17,85,7,35,30,-64,40,26,31,63,-20,13,55,-39,-115,15,-20,55,67,-20,69,-116,-57,-46,61,97,-10,-42,-9,55,12,13,15,11,-1, 
  /* [15][0][][] */ -7,-57,-68,-21,52,6,84,-64,-21,8,-11,-28,86,31,-109,84,57,49,86,-69,-113,6,44,-4,-93,37,23,52,82,60,51,-39,24,76,113,114,-15,-106,-26,-48,105,47,127,-48,4,-32,-22,88, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.026052547618746758, 0.027876567095518112, 0.043177954852581024, 0.04025842621922493, 0.038481060415506363, 0.032303746789693832, 0.02952275425195694, 0.024847961962223053, 0.023281892761588097, 0.02457733079791069, 0.028521426022052765, 0.016129946336150169, 0.036466121673583984, 0.052500676363706589, 0.020314600318670273, 0.019525729119777679, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 9821, 32419, -322, 47794, 5687, 143178, -1914, 55779, 5005, 27463, 27149, -735, 5086, 33041, -3377, -2301, 14, 2458, 2732, -2056, 460, -2618, -62, -15761, -5740, 53183, 146407, 113153, 2070, 2163, -1710, 874, 24200, 824, 33350, -13359, 42150, 4442, 62630, -1343, 1888, 67157, 2611, 3966, 47797, -223, 7591, 50113, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 5.6493481679353863e-05, 3.9167585782706738e-05, 0.00020121682609897107, 4.8758556658867747e-05, 9.3089744041208178e-05, 4.7864145017229021e-05, 0.00017073001072276384, 0.00010172867041546851, 6.6079112002626061e-05, 4.1990013414761052e-05, 4.0365834138356149e-05, 9.7894560894928873e-05, 4.156415889156051e-05, 3.1759693229105324e-05, 0.00013875839067623019, 0.00021518328867387027, 0.00019417876319494098, 7.1969894634094089e-05, 0.00010327027848688886, 0.00018449130584485829, 8.6058258602861315e-05, 0.00030349305598065257, 0.00012333801714703441, 9.1002555564045906e-05, 8.6119260231498629e-05, 8.0895377323031425e-05, 3.244101390009746e-05, 5.8492543757893145e-05, 0.00012003203300992027, 0.00012141452316427603, 0.00011770828132284805, 0.00017970227054320276, 3.7978912587277591e-05, 0.00011446036660345271, 2.9782282581436448e-05, 6.371543713612482e-05, 0.00013853669224772602, 7.0006637542974204e-05, 9.0952475147787482e-05, 0.00012115791469113901, 9.694282925920561e-05, 8.6130523413885385e-05, 8.1272686657030135e-05, 7.7370132203213871e-05, 3.0163138944772072e-05, 0.00018405857554171234, 7.3321731179021299e-05, 2.875772952393163e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 72,-104,92,76,52,-33,102,-68,64,-88,-78,48,52,-45,-70,-92,101,81,52,80,68,-72,-86,54,-31,-40,-71,-65,-67,62,-64,-108,-11,40,69,68,-67,54,-49,-18,51,-73,55,63,-91,12,76,-30, 84,-96,127,92,-79,-69,-59,-84,98,-96,-61,71,81,-109,-92,93,-37,98,83,127,88,-112,54,73,-54,-78,-73,-82,54,74,-30,-127,-83,81,80,86,-83,81,-80,-13,73,-92,82,89,-67,-127,93,-100, 35,-50,66,43,17,-44,-51,-44,45,-31,3,39,30,-82,-50,-4,-55,34,36,72,41,-51,34,29,-27,-48,-50,-26,33,36,87,-87,-87,44,39,38,-32,40,-40,-9,39,-43,37,45,-12,-8,46,-82, 
  /* [0][1][][] */ 91,-122,-43,97,55,-80,127,-92,88,-116,-67,80,79,-110,-12,-127,127,108,76,-34,87,107,-127,75,76,-76,-94,-103,-127,88,-72,-6,-85,68,111,98,-84,80,-79,92,82,-98,87,90,-84,107,93,-94, 127,-127,-66,127,-127,-127,-91,-127,127,-127,-127,127,127,-127,-19,102,-62,127,127,-46,127,127,69,127,127,-127,-127,-127,51,127,-32,12,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-12,127,-127, 66,-81,-34,68,38,-63,-51,-64,66,-42,-58,62,50,-55,-12,13,-59,46,60,-27,61,66,51,69,61,-67,-61,-45,37,56,127,15,-64,68,50,51,-50,59,-61,59,58,-62,58,62,-63,-67,69,-63, 
  /* [0][2][][] */ 47,-59,-49,52,25,-55,63,-43,44,-69,-3,49,53,-78,79,-79,73,58,34,-30,29,-15,-80,31,-27,-46,-56,-54,-75,34,-41,90,-71,35,53,49,-26,41,-42,-81,51,-54,37,50,-25,17,41,-85, 76,-87,-50,83,-58,-64,-71,-70,54,-73,-64,67,78,-50,127,36,-43,61,63,-43,60,-19,41,70,-47,-63,-83,-67,33,61,-26,109,-55,59,62,58,-49,69,-66,-100,66,-68,56,65,-84,49,67,-60, 47,-53,-27,48,31,-20,-18,-35,20,-25,-52,38,33,-1,67,29,-34,20,32,-33,29,-2,41,47,-26,-27,-54,-28,34,36,61,67,-3,32,20,25,-23,34,-34,-49,29,-35,27,29,-64,9,39,-9, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.002400972880423069, 0.0016646223375573754, 0.0085517149418592453, 0.0020722385961562395, 0.0039563141763210297, 0.0020342261996120214, 0.0072560254484415054, 0.0043234685435891151, 0.0028083622455596924, 0.0017845755210146308, 0.0017155479872599244, 0.0041605187579989433, 0.0017664767801761627, 0.0013497868785634637, 0.00589723140001297, 0.0091452896595001221, 0.008252597413957119, 0.0030587203800678253, 0.0043889866210520267, 0.0078408801928162575, 0.0036574758123606443, 0.012898454442620277, 0.0052418657578527927, 0.0038676084950566292, 0.0036600686144083738, 0.0034380534198135138, 0.0013787430943921208, 0.0024859330151230097, 0.0051013613119721413, 0.0051601170562207699, 0.0050026020035147667, 0.007637346163392067, 0.0016141037922352552, 0.0048645655624568462, 0.0012657470069825649, 0.0027079060673713684, 0.0058878092095255852, 0.0029752820264548063, 0.0038654801901429892, 0.0051492112688720226, 0.0041200700215995312, 0.0036605473142117262, 0.0034540891647338867, 0.0032882306259125471, 0.0012819333933293819, 0.0078224893659353256, 0.0031161734368652105, 0.0012222034856677055, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 410, 927, 1237, 136, 8461, 15825, 2226, -190, -903, -462, 1276, 1009, 2840, 770, 13539, 2720, 1636, -1262, -132, 3577, -1289, 10473, 10305, 7283, 3999, 259, 4795, 3665, 6588, -475, 5864, 6527, 424, -94, 5034, 5152, -1602, 177, -81, 5949, 656, -427, -869, 79, 1051, 2615, 456, 815, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00039626628858968616, 0.00082850648323073983, 0.00042095422395505011, 0.00040079580503515899, 0.00026503053959459066, 0.00025973303127102554, 0.00049477280117571354, 0.0003471396048553288, 0.00035935928463004529, 0.00075850746361538768, 0.00083827850176021457, 0.00033250323031097651, 0.00039751327130943537, 0.0010084431851282716, 0.00025872138212434947, 0.00046397207188419998, 0.00032236677361652255, 0.00030609389068558812, 0.0003154693404212594, 0.0002648772788234055, 0.00046218093484640121, 0.00024876161478459835, 0.00035726558417081833, 0.00021087964705657214, 0.00040106844971887767, 0.000446522724814713, 0.0014599234564229846, 0.00049677956849336624, 0.00025603783433325589, 0.00048833625623956323, 0.00044535461347550154, 0.00018226228712592274, 0.00087771669495850801, 0.00038044940447434783, 0.000720099953468889, 0.00038737320574000478, 0.00086263642879202962, 0.00045327554107643664, 0.00029224794707261026, 0.00030960238655097783, 0.00023449039144907147, 0.00033000984694808722, 0.0003679352521430701, 0.00038138704258017242, 0.0018305376870557666, 0.00050823151832446456, 0.00033525846083648503, 0.0014046239666640759, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,1,15,67,-27,32,16,-30, 
  /* [1][0][][] */ 63,61,34,19,-11,-33,108,127, 
  /* [2][0][][] */ -16,-22,8,-11,-127,-21,-5,1, 
  /* [3][0][][] */ 123,-6,4,-118,-127,14,35,-12, 
  /* [4][0][][] */ -127,78,10,9,73,-21,61,26, 
  /* [5][0][][] */ -100,-19,16,-4,-127,19,24,83, 
  /* [6][0][][] */ 8,-127,45,-12,18,-23,11,35, 
  /* [7][0][][] */ -58,-11,3,94,127,-36,-28,16, 
  /* [8][0][][] */ 81,18,-8,-127,40,-22,-26,-44, 
  /* [9][0][][] */ -27,-127,-3,-2,-10,113,-56,89, 
  /* [10][0][][] */ -100,-9,-34,31,-127,68,64,-14, 
  /* [11][0][][] */ 112,25,47,2,-47,-50,-53,-127, 
  /* [12][0][][] */ -1,18,52,0,7,-75,127,63, 
  /* [13][0][][] */ 72,-36,-23,-26,102,127,120,-60, 
  /* [14][0][][] */ 127,58,28,10,-58,-37,-18,0, 
  /* [15][0][][] */ 14,-127,11,-17,3,7,21,40, 
  /* [16][0][][] */ -34,2,-11,-22,-127,1,1,-14, 
  /* [17][0][][] */ -7,123,-89,7,34,-127,103,-83, 
  /* [18][0][][] */ 127,-25,-17,22,-52,13,19,109, 
  /* [19][0][][] */ 127,-83,-42,-30,43,-38,46,-6, 
  /* [20][0][][] */ 97,14,-36,127,3,38,7,-65, 
  /* [21][0][][] */ 13,26,-47,7,-27,83,-127,-55, 
  /* [22][0][][] */ -127,94,29,2,-50,-49,-30,-32, 
  /* [23][0][][] */ -37,-49,-2,20,-127,52,74,-10, 
  /* [24][0][][] */ 127,12,-11,3,-107,-37,5,15, 
  /* [25][0][][] */ 17,-10,-1,-19,127,27,31,-26, 
  /* [26][0][][] */ 12,-74,-9,-33,-2,-127,81,-61, 
  /* [27][0][][] */ -20,-127,32,-11,-3,-60,37,-11, 
  /* [28][0][][] */ -79,48,-18,15,8,-44,127,69, 
  /* [29][0][][] */ -10,42,7,5,8,36,-88,-127, 
  /* [30][0][][] */ 127,-25,-5,25,-69,-6,-3,-12, 
  /* [31][0][][] */ 35,-33,118,-34,15,-127,118,94, 
  /* [32][0][][] */ -84,11,4,3,-124,-80,-127,69, 
  /* [33][0][][] */ -33,15,-3,18,-127,-58,-47,33, 
  /* [34][0][][] */ 17,-127,72,-2,-6,89,-72,76, 
  /* [35][0][][] */ -18,-47,-127,-12,-3,-64,43,-56, 
  /* [36][0][][] */ 12,127,55,11,-25,10,-20,-61, 
  /* [37][0][][] */ -127,41,31,-2,39,-35,6,-106, 
  /* [38][0][][] */ -127,-14,-71,-1,28,35,55,96, 
  /* [39][0][][] */ -47,-5,72,1,18,-93,127,107, 
  /* [40][0][][] */ -51,-25,-1,-38,-127,119,113,-34, 
  /* [41][0][][] */ -127,39,16,-59,-61,-69,-76,40, 
  /* [42][0][][] */ -27,-115,-36,-17,-22,78,-127,-51, 
  /* [43][0][][] */ -76,18,-12,-127,95,64,65,-3, 
  /* [44][0][][] */ 127,-16,5,-91,27,-34,-7,55, 
  /* [45][0][][] */ -11,-127,25,-12,-17,-80,70,-3, 
  /* [46][0][][] */ 107,-9,6,-25,127,-33,-44,-12, 
  /* [47][0][][] */ 127,-11,-12,125,-23,18,23,-26, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00066855020122602582, 0.0013977928319945931, 0.00071020179893821478, 0.0006761920521967113, 0.0004471392894629389, 0.00043820170685648918, 0.00083474291022866964, 0.00058566743973642588, 0.00060628354549407959, 0.0012796958908438683, 0.0014142794534564018, 0.00056097406195476651, 0.00067065400071442127, 0.0017013683682307601, 0.00043649494182318449, 0.00078277825377881527, 0.00054387259297072887, 0.00051641825120896101, 0.00053223577560856938, 0.00044688073103316128, 0.0007797563448548317, 0.00041969161247834563, 0.00060275121359154582, 0.00035578003735281527, 0.00067665206734091043, 0.00075333903077989817, 0.0024630713742226362, 0.00083812850061804056, 0.00043196746264584363, 0.00082388363080099225, 0.0007513682940043509, 0.00030749899451620877, 0.0014808165142312646, 0.00064186519011855125, 0.0012148976093158126, 0.00065354647813364863, 0.0014553742948919535, 0.0007647318416275084, 0.00049305841093882918, 0.00052233750466257334, 0.00039561427547596395, 0.00055676739430055022, 0.00062075222376734018, 0.00064344709971919656, 0.0030883434228599072, 0.00085744942771270871, 0.00056562246754765511, 0.0023697742726653814, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -24805, 28178, -14948, -11493, 18170, 5378, 21938, 49134, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00049952126573771238, 0.00060931377811357379, 0.0014457805082201958, 0.0015168768586590886, 0.00068776530679315329, 0.0005687140510417521, 0.00061990058748051524, 0.00090357084991410375, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -55,-22,-61,8,-14,-33,-4,50,-85,127,-38,87,105,-11,54,5,2,-46,-66,-20,14,12,-35,-37,12,-78,31,75,-2,-8,15,-91,-5,-103,121,19,-15,-14,12,-3,91,12,28,-18,-42,-21,-4,-40, 
  /* [1][0][][] */ -22,33,127,-7,-15,-32,11,-72,25,-7,24,-8,-12,3,-4,-109,12,-86,13,-3,-35,7,34,-26,-26,-3,5,-4,18,-12,13,-9,7,12,16,22,-33,-36,87,-59,29,65,-22,42,-24,-12,21,-3, 
  /* [2][0][][] */ 8,-35,18,-30,23,21,-13,-17,10,-6,-4,11,-4,55,5,-3,-37,127,-43,-26,-1,23,-31,-2,121,0,15,3,-30,7,1,-39,-7,-2,25,22,5,0,-12,4,-4,-6,-16,0,6,25,-20,-29, 
  /* [3][0][][] */ -12,-78,-4,18,-1,-6,-18,5,-9,-17,9,27,15,-9,59,3,1,-23,8,29,-2,24,-22,5,4,45,-2,13,0,13,127,-2,23,11,21,-6,-25,-22,9,10,-18,10,-12,29,-11,-21,-5,28, 
  /* [4][0][][] */ -108,12,10,3,6,-46,2,24,56,-47,26,-31,-50,1,-28,0,10,22,-45,35,17,-10,21,2,2,44,7,127,-2,-5,2,-16,7,-124,-38,16,9,27,17,-2,-60,9,-16,12,-72,15,24,16, 
  /* [5][0][][] */ -30,15,16,-14,-56,25,-10,44,10,-9,10,3,-11,-63,11,48,-12,-89,30,10,35,-50,2,22,0,11,-86,-61,-33,-45,16,10,6,-64,-18,-92,62,-2,-33,33,24,-45,6,10,127,-11,-40,3, 
  /* [6][0][][] */ -41,-44,-13,-12,32,-37,6,-41,-24,14,29,-11,-19,42,7,-47,9,13,22,-47,-72,29,8,-91,-4,-13,-60,-72,47,36,-14,23,18,-69,-33,48,-88,-47,-5,-42,23,-6,21,47,127,-49,59,13, 
  /* [7][0][][] */ 12,43,-84,36,-24,20,3,61,8,1,69,-31,-11,-34,-5,-10,-25,-127,36,-21,60,59,3,-66,21,-33,25,-7,-29,25,-9,2,-7,49,1,-28,-10,-65,-37,-65,-29,-26,34,65,-23,-28,-4,-7, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.021229652687907219, 0.025895833969116211, 0.061445672065019608, 0.064467266201972961, 0.029230024665594101, 0.024170346558094025, 0.026345774531364441, 0.038401760160923004, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -51976, -109, 8620, -1163, 5437, -5373, 893, 22082, 3254, 26268, -2414, 23451, -7019, -686, 20705, 8217, 335, 15034, 22376, 9041, 1932, -13, -960, 10693, -7936, 29304, 49984, 25667, 3211, 366, -1480, 1664, 893, 13046, -6808, 15118, -10119, 22131, -23559, 152616, 15844, 22319, 9077, -1859, 19326, 3233, 2068, -1105, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00032490922603756189, 0.00029688444919884205, 0.00019198056543245912, 0.00029400113271549344, 0.00016375444829463959, 9.2222071543801576e-05, 0.0012684775283560157, 0.0001572345063323155, 0.00012171508569736034, 0.00018337760411668569, 8.6698833911214024e-05, 0.00018074792751576751, 0.00032329422538168728, 0.000376159354345873, 0.00011712255945894867, 0.0001814250135794282, 0.00026394042652100325, 0.00028772646328434348, 0.00011585958418436348, 0.00016501209756825119, 0.0003098672314081341, 0.00025484419893473387, 0.00022165516566019505, 0.00018283659301232547, 0.00015155393339227885, 0.0001239947450812906, 0.00056237634271383286, 0.00012606315431185067, 0.00028971562278456986, 0.0019838218577206135, 9.1387439169920981e-05, 0.00031734484946355224, 0.0010241909185424447, 0.00019844257622025907, 0.00022025397629477084, 0.00016120885265991092, 0.00035577503149397671, 0.00011829099821625277, 0.00028190130251459777, 1.7588377886568196e-05, 0.00021402649872470647, 6.6011336457449943e-05, 0.00016658107051625848, 0.00015293828619178385, 0.00012714184413198382, 9.7049975011032075e-05, 0.00012851231440436095, 9.8203105153515935e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,22,112,5,84,1,28,14,8,8,8,-8,-10,-42,9,1,8,-17,-112,-12,-22,127,-10,-4,3,-8,10,-8,5,16,99,18,28,38,-25,2,34,3,3,17,-69,-8,-7,15,1,-8,-10, 127,10,15,-127,27,89,10,11,121,127,5,45,-52,-23,6,9,127,-56,-60,-54,-107,25,-108,14,16,71,-33,-85,21,21,12,-127,4,-59,127,10,-40,-47,-4,114,-80,-94,-28,3,-37,-9,-127,22, -31,-1,8,15,-2,63,4,18,24,6,-15,33,-16,-3,14,5,-102,28,-4,83,-35,-10,-16,-6,-3,-60,-4,32,-21,5,5,-23,8,-20,16,-18,-1,47,44,-15,50,38,-13,12,-47,3,0,-5, 
  /* [0][1][][] */ 124,6,1,-97,15,-27,36,-16,9,10,-13,54,-7,-2,18,-33,1,-50,-54,-85,6,-72,-123,-17,4,97,-18,-127,-10,33,11,-112,15,-51,-2,127,-3,59,-38,43,-62,-127,39,-89,-47,-13,-13,-5, 28,-127,-127,116,-127,-127,-127,-127,-127,-96,127,-127,127,127,35,-127,-83,127,127,-108,127,127,110,127,127,-127,-127,30,-127,-127,96,127,-127,127,-29,-40,127,-127,127,127,127,-79,127,127,127,-119,105,108, 54,5,48,-13,6,-64,44,19,-25,14,-107,-7,-3,-40,127,5,62,-66,-69,90,12,-44,12,-32,2,5,-38,72,16,41,2,3,32,-40,9,65,-7,65,71,-11,-81,9,-83,-30,26,-15,-9,7, 
  /* [0][2][][] */ -53,-7,25,-16,9,36,-35,21,4,-25,12,32,13,-7,-39,17,6,21,-18,112,2,-33,-14,-11,-3,20,-4,55,-13,4,44,-33,-20,-42,-35,-35,-1,31,10,-20,12,-7,42,-38,-40,19,-9,19, 68,127,74,22,17,-21,125,34,14,-4,43,27,1,0,-91,26,-57,-57,-42,127,-41,47,14,21,34,-65,-42,33,75,2,127,21,84,-24,4,-34,-27,-17,-15,120,-24,-13,-39,45,19,-31,10,-127, -41,-4,6,-3,6,-8,-62,8,-23,-12,-39,-41,26,-9,-8,13,33,22,-21,-124,23,-10,6,-7,-5,10,-12,-51,-19,9,6,9,-21,90,-39,-21,-8,37,23,-63,8,8,-37,7,-48,127,-2,0, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013808641582727432, 0.012617588974535465, 0.0081591736525297165, 0.01249504741281271, 0.0069595640525221825, 0.0039194379933178425, 0.053910292685031891, 0.0066824662499129772, 0.0051728910766541958, 0.0077935480512678623, 0.0036847004666924477, 0.0076817865483462811, 0.013740004040300846, 0.015986772254109383, 0.0049777086824178696, 0.0077105630189180374, 0.011217467486858368, 0.012228374369442463, 0.0049240323714911938, 0.0070130140520632267, 0.013169357553124428, 0.010830878280103207, 0.0094203446060419083, 0.0077705550938844681, 0.0064410422928631306, 0.005269776564091444, 0.023900993168354034, 0.005357684101909399, 0.012312913313508034, 0.084312424063682556, 0.0038839660119265318, 0.013487155549228191, 0.043528113514184952, 0.0084338095039129257, 0.0093607939779758453, 0.0068513760343194008, 0.015120438300073147, 0.0050273672677576542, 0.011980804614722729, 0.0007475060410797596, 0.0090961260721087456, 0.0028054818976670504, 0.007079695351421833, 0.0064998771995306015, 0.005403528455644846, 0.0041246237233281136, 0.005461773369461298, 0.0041736317798495293, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 58154, 8931, 7735, 7219, 1544, 11890, -2157, -296, 694, 1844, 3302, 191, 2676, -777, 956, -2154, 5042, 11763, -337, 31517, 4823, 3476, 7527, -629, 2593, 3351, 32590, 14523, -193, -2822, 75, 2542, -2412, 12970, 3270, 7298, 8238, 6020, 20576, 2007, -921, 3350, 1487, 3408, 4046, 2763, -1308, 2736, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 7.3840295954141766e-05, 0.00025752623332664371, 0.00021010985074099153, 0.00044064104440622032, 0.0014397974591702223, 0.00041661277646198869, 0.00088083872105926275, 0.0010747489286586642, 0.00081298028817400336, 0.00077810726361349225, 0.00070475100073963404, 0.00048995960969477892, 0.00041206742753274739, 0.00059895537560805678, 0.00047121435636654496, 0.0017196533735841513, 0.00031365052564069629, 0.00036730273859575391, 0.0017588217742741108, 8.4180479461792856e-05, 0.00027448585024103522, 0.00026871851878240705, 0.00055083760526031256, 0.0008435654453933239, 0.00043395831016823649, 0.000332549650920555, 0.00012802664423361421, 0.00024909171042963862, 0.00067411590134724975, 0.00095086864894255996, 0.00054978876141831279, 0.00031895289430394769, 0.00083055568393319845, 0.00017425404803361744, 0.00035083870170637965, 0.00024589392705820501, 0.00046120729530230165, 0.00022756060934625566, 0.00011350057320669293, 0.0022714112419635057, 0.00069170858478173614, 0.00084639055421575904, 0.00037913388223387301, 0.00044505999539978802, 0.00027714113821275532, 0.00034910123213194311, 0.00090330920647829771, 0.00094288721447810531, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 75,37,9,-25,127,49,-30,-23, 
  /* [1][0][][] */ -21,-16,34,127,13,7,9,29, 
  /* [2][0][][] */ 11,-127,-11,37,-22,-74,99,9, 
  /* [3][0][][] */ 127,-24,-23,22,0,-25,21,1, 
  /* [4][0][][] */ 6,-42,127,-16,-9,-43,10,-84, 
  /* [5][0][][] */ 56,3,42,-3,127,9,1,25, 
  /* [6][0][][] */ -18,126,-34,96,18,39,-127,-92, 
  /* [7][0][][] */ 4,127,-12,-5,7,-12,11,0, 
  /* [8][0][][] */ 127,34,-5,0,-39,-31,-2,-25, 
  /* [9][0][][] */ -127,8,-13,6,20,-2,-6,-2, 
  /* [10][0][][] */ -62,-2,0,127,54,53,1,8, 
  /* [11][0][][] */ -127,33,6,-77,33,12,-34,-60, 
  /* [12][0][][] */ 127,62,8,21,-96,-6,2,-116, 
  /* [13][0][][] */ -50,68,-127,-10,-21,113,-81,89, 
  /* [14][0][][] */ -75,-27,4,127,21,33,-52,-60, 
  /* [15][0][][] */ -7,127,-1,-2,15,-32,26,-45, 
  /* [16][0][][] */ -24,-127,-36,3,-12,-96,108,-47, 
  /* [17][0][][] */ 14,127,-1,-7,4,53,-68,-33, 
  /* [18][0][][] */ 1,41,-127,0,24,48,-28,63, 
  /* [19][0][][] */ -127,47,13,-40,-119,8,58,39, 
  /* [20][0][][] */ -127,-13,-22,6,58,-55,39,-24, 
  /* [21][0][][] */ -85,-6,-29,-16,-127,-12,-13,-17, 
  /* [22][0][][] */ -127,-26,1,-33,109,-19,61,55, 
  /* [23][0][][] */ -43,-16,2,-11,-14,93,-127,-109, 
  /* [24][0][][] */ -13,34,-127,5,-5,50,-14,74, 
  /* [25][0][][] */ 127,-43,1,84,-67,-15,-24,-32, 
  /* [26][0][][] */ -2,-34,9,11,-20,127,115,-32, 
  /* [27][0][][] */ 73,1,-31,-8,127,23,44,-8, 
  /* [28][0][][] */ -1,127,-51,6,-3,69,-39,104, 
  /* [29][0][][] */ -17,-8,-28,-15,-20,101,-127,-89, 
  /* [30][0][][] */ -4,-8,5,-127,-13,-5,2,-6, 
  /* [31][0][][] */ -45,35,-15,-13,-127,10,5,-32, 
  /* [32][0][][] */ -5,55,58,-127,10,30,-85,-115, 
  /* [33][0][][] */ -61,-13,13,9,-127,46,39,-13, 
  /* [34][0][][] */ -127,69,17,13,34,-48,3,-1, 
  /* [35][0][][] */ -127,89,15,-1,0,-99,95,-7, 
  /* [36][0][][] */ 5,72,16,-27,7,103,-127,-50, 
  /* [37][0][][] */ 20,-105,-29,15,49,-127,102,37, 
  /* [38][0][][] */ 41,-127,-23,-28,46,73,-35,15, 
  /* [39][0][][] */ 8,-127,-14,-2,-5,-29,-45,-86, 
  /* [40][0][][] */ 127,56,-10,-32,-27,72,-106,-83, 
  /* [41][0][][] */ 15,-127,30,7,-12,100,-80,115, 
  /* [42][0][][] */ 29,-8,0,-127,-60,12,-19,-49, 
  /* [43][0][][] */ -98,-35,8,-127,45,35,-73,-18, 
  /* [44][0][][] */ 45,6,-17,5,9,67,127,32, 
  /* [45][0][][] */ -127,-106,-76,38,69,12,30,77, 
  /* [46][0][][] */ 21,81,127,-9,-1,-4,3,39, 
  /* [47][0][][] */ 13,26,22,127,22,21,53,7, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00018021963478531688, 0.00062853604322299361, 0.0005128083867020905, 0.0010754584800451994, 0.0035140675026923418, 0.0010168134467676282, 0.0021498347632586956, 0.002623105188831687, 0.0019842148758471012, 0.0018991014221683145, 0.0017200631555169821, 0.0011958286631852388, 0.0010057197650894523, 0.0014618511777371168, 0.0011500777909532189, 0.0041971029713749886, 0.00076551677193492651, 0.00089646404376253486, 0.0042926999740302563, 0.00020545659936033189, 0.00066992879146710038, 0.00065585266565904021, 0.0013444116339087486, 0.0020588631741702557, 0.0010591481113806367, 0.00081164325820282102, 0.00031247053993865848, 0.00060795014724135399, 0.0016452930867671967, 0.002320754574611783, 0.0013418517773970962, 0.00077845808118581772, 0.0020271106623113155, 0.00042529628262855113, 0.00085628079250454903, 0.00060014543123543262, 0.001125653856433928, 0.00055539986351504922, 0.00027701721410267055, 0.0055437604896724224, 0.0016882308991625905, 0.0020657582208514214, 0.00092533993301913142, 0.0010862436611205339, 0.0006764094578102231, 0.00085204018978402019, 0.0022046777885407209, 0.0023012745659798384, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -4133, -27370, 25564, 27709, 1620, -78, 33417, 12529, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0010132194729521871, 0.00059488235274329782, 0.00089216994820162654, 0.0011846410343423486, 0.00088225491344928741, 0.0010294697713106871, 0.00065201462712138891, 0.00045592716196551919, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -18,-5,6,-99,3,32,5,4,12,3,7,-12,102,0,0,6,0,3,-5,-7,89,4,-5,0,44,32,20,11,7,1,5,-127,11,6,-9,3,-12,3,-13,42,6,-31,-11,9,1,-1,7,7, 
  /* [1][0][][] */ -40,-10,2,-4,42,25,-32,79,16,12,-36,-12,14,0,25,39,0,50,21,-63,-6,18,127,21,-21,16,57,-2,17,-17,14,-7,12,-4,-3,-25,21,-56,20,6,-12,-13,-86,-5,-44,0,-68,-96, 
  /* [2][0][][] */ -56,3,7,13,33,5,29,33,3,45,13,14,2,0,4,52,0,15,-127,12,-12,21,10,-17,-38,0,28,6,5,28,20,-1,9,-13,-20,-20,13,3,11,9,35,-21,-30,-4,23,-68,30,11, 
  /* [3][0][][] */ 5,0,-3,5,-11,29,8,-6,72,23,-7,-11,25,0,-39,-1,0,-3,-13,-1,-10,-2,3,-24,-22,-13,-17,-7,-11,-3,13,-9,-54,52,-67,-2,2,3,4,-127,3,-5,7,-70,10,-5,6,9, 
  /* [4][0][][] */ 0,-8,75,29,5,-2,-3,-2,11,-9,-4,-11,-76,0,-15,0,0,10,16,4,93,6,6,-4,-11,36,-11,47,-15,-6,-6,127,7,-1,0,-2,17,-9,-26,-20,-3,-126,7,-3,2,2,2,4, 
  /* [5][0][][] */ 2,47,2,-12,-4,49,31,15,-26,34,1,58,29,0,-127,-7,0,13,-49,25,-13,4,-15,36,-14,-5,26,-10,-12,26,19,-18,51,31,-41,-8,0,21,-51,16,27,-8,-10,31,22,63,20,23, 
  /* [6][0][][] */ -19,-52,8,5,46,-60,-16,-2,30,-39,-11,88,-3,0,-127,50,0,-11,52,-22,-2,4,22,-36,31,19,-15,-7,48,-10,-3,1,102,-39,25,5,0,-15,-63,-30,-13,-17,-12,-38,-16,-76,-18,-33, 
  /* [7][0][][] */ -115,-22,-17,-3,127,37,74,23,21,14,16,-19,-5,0,81,93,0,17,5,63,4,7,-28,43,26,-5,45,2,52,52,57,12,-18,-19,-15,-20,7,15,3,27,65,11,-10,-5,64,0,60,80, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.043061826378107071, 0.025282498449087143, 0.037917222827672958, 0.050347242504358292, 0.037495832890272141, 0.043752465397119522, 0.027710620313882828, 0.019376903772354126, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 76157, 56472, 62355, 42154, -409, 12439, 2718, 28746, 23956, 24317, 27719, 9785, -45631, -127, 49128, 2069, -204, 32981, 3724, 735, -12538, 16412, 52806, 29112, -17253, 36866, 41014, 16797, -2574, 15690, -9323, -50090, 11687, 104221, 29932, 1032, 57952, -389, 139296, -22431, 13079, -31416, 2634, 100459, 377, 55104, 749, -22036, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.7201802923809737e-05, 7.1083202783484012e-05, 0.00015411750064231455, 8.9313500211574137e-05, 0.00010950488649541512, 0.00018267864652443677, 0.00011998999252682552, 6.2634098867420107e-05, 9.5947994850575924e-05, 3.5460172512102872e-05, 7.5785981607623398e-05, 2.7177295123692602e-05, 0.00017562728316988796, 0.005541567225009203, 5.4790951253380626e-05, 0.00027813942870125175, 0.0027484172023832798, 2.307517388544511e-05, 7.9840327089186758e-05, 0.00020315372967161238, 0.00010311707592336461, 0.00015480598085559905, 0.00011119226110167801, 3.6851535696769133e-05, 9.595426672603935e-05, 7.3786795837804675e-05, 3.117781670880504e-05, 4.4814831198891625e-05, 0.00018390518380329013, 5.7117580581689253e-05, 5.2799965487793088e-05, 0.00023314620193559676, 0.00020776082237716764, 9.9933558885823004e-06, 8.3889281086158007e-05, 0.00018594745779410005, 1.3535668585973326e-05, 0.00047637929674237967, 3.214710159227252e-05, 7.8343662607949227e-05, 5.9819853049702942e-05, 0.00023918091028463095, 0.0001095348343369551, 9.7710499176173471e-06, 0.00016975299513433129, 0.00010653746721800417, 0.00021709549764636904, 0.00011235537385800853, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -40,-22,-8,-16,5,-37,-80,-69,-22,-53,7,60,35,-71,114,-44,-113,-82,36,-5,-1,-73,-110,-79,-33,-122,-64,-21,70,13,93,27,-127,-90,-9,61,19,49,-127,83,-78,-13,107,-117,-6,-34,-87,108, 75,10,-30,-30,57,-127,-127,-85,58,-78,-111,105,38,-82,-2,60,-52,-106,60,6,10,-108,-127,-70,-2,-127,-122,-37,-51,21,-53,55,30,-127,64,89,14,75,-92,127,-127,6,123,-127,2,-22,-127,92, -29,37,6,-8,-64,-106,-59,-23,87,-12,-127,37,8,-71,-100,-14,-127,-23,31,12,-14,-78,-36,-27,-9,-29,-57,-13,-8,18,-24,10,104,-93,75,37,13,38,-1,17,-79,7,4,-84,-16,4,-55,16, 
  /* [0][1][][] */ -83,-127,-43,-43,-11,56,96,-107,-24,-110,-17,108,91,-64,27,-98,-121,-90,89,-76,42,-86,-104,-127,41,-122,-76,-35,127,-61,127,84,-42,-87,-15,86,-37,-76,-107,93,41,61,107,-117,-94,-120,82,121, 127,-80,-127,-127,127,40,90,-127,101,-127,-107,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-122,-124,127,-101,-127,-127,-114,-127,-70,127,31,-115,127,127,-70,-127,-100,91,60,127,127,-122,-113,-127,125,127, -50,27,-61,-84,-120,-21,29,-37,127,-25,-75,36,56,-70,-24,-46,-37,-32,57,-71,60,-81,-38,-21,48,-8,-48,-61,18,-87,-35,19,31,-101,122,20,-39,-62,4,-15,35,57,11,-79,-58,-38,66,36, 
  /* [0][2][][] */ -57,-109,-36,-31,-1,35,-6,-35,-39,-62,-16,58,75,-127,-127,-64,-43,-21,64,77,50,-34,-12,-61,29,-56,-17,-62,76,27,75,62,104,-26,-38,-6,-93,35,-17,29,9,40,17,-60,94,-80,3,28, 87,-72,-92,-84,79,16,5,-46,51,-73,-35,52,81,-26,14,94,-24,-35,76,120,79,-55,-18,-59,88,-69,-21,-104,-49,38,-42,111,-16,-52,68,5,-127,50,-16,-3,12,32,18,-71,127,-100,-12,35, -25,29,-44,-36,-80,-19,21,-13,62,-5,-14,32,30,-43,111,-31,-93,-7,28,62,73,-30,-1,-7,39,-5,-8,-65,-13,27,-20,38,-89,-39,68,8,-15,20,32,-40,8,39,-5,-23,64,-36,-3,14, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0032810764387249947, 0.0030210360419005156, 0.0065499935299158096, 0.00379582354798913, 0.0046539576724171638, 0.007763842586427927, 0.0050995745696127415, 0.002661949023604393, 0.0040777898393571377, 0.0015070573426783085, 0.0032209041528403759, 0.0011550349881872535, 0.0074641592800617218, 0.23551659286022186, 0.002328615402802825, 0.011820925399661064, 0.1168077290058136, 0.00098069489467889071, 0.0033932139631360769, 0.0086340336129069328, 0.0043824757449328899, 0.0065792538225650787, 0.0047256709076464176, 0.0015661902725696564, 0.0040780561976134777, 0.0031359386630356312, 0.0013250572374090552, 0.0019046302186325192, 0.0078159701079130173, 0.0024274971801787615, 0.0022439984604716301, 0.0099087134003639221, 0.008829834870994091, 0.00042471761116757989, 0.0035652944352477789, 0.007902766577899456, 0.00057526590535417199, 0.020246120169758797, 0.0013662517303600907, 0.0033296055626124144, 0.0025423436891287565, 0.01016518846154213, 0.0046552303247153759, 0.00041526960558257997, 0.0072145024314522743, 0.0045278421603143215, 0.009226558730006218, 0.0047751031816005707, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 2759, 68, 7707, 4813, 6172, 6503, 8447, -34, -13, -267, 2026, 458, 11397, -76340664, 2711, 31766, -61626148, -101, -574, 11841, 3157, -10, 12, 382, 3525, -728, 41, 606, 2475, 1352, 2459, 13512, 3737, 269, 195, -2132, 335, 3758, -175, 10505, 1817, 12469, -317, -90, 11124, 18, 12557, 3078, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00074327422771602869, 0.00056187005247920752, 0.00040780994459055364, 0.00036612659459933639, 0.00033592528779990971, 0.00030863771098665893, 0.00045256174053065479, 0.0016751623479649425, 0.00047799112508073449, 0.0025530215352773666, 0.00073783774860203266, 0.0020065265707671642, 0.00019116225303150713, 2.1244725978419865e-09, 0.00098519574385136366, 0.00010649879550328478, 2.1244725978419865e-09, 0.0075353411957621574, 0.00039723012014292181, 0.00031948791001923382, 0.00030216044979169965, 0.0057367775589227676, 0.00045870465692132711, 0.0014690604293718934, 0.001038279035128653, 0.00072403857484459877, 0.0030645688530057669, 0.0020486051216721535, 0.00042480876436457038, 0.002218285808339715, 0.0011826443951576948, 0.0001713822566671297, 0.00019268317555543035, 0.011877428740262985, 0.00063256995053961873, 0.00057956174714490771, 0.0045677619054913521, 0.00034564724774099886, 0.0026418331544846296, 0.00033245826489292085, 0.0015708087012171745, 0.00018716171325650066, 0.00046401168219745159, 0.010112239047884941, 0.00045014641364105046, 0.00046010760706849396, 0.00022582001111004502, 0.00028431660030037165, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -2,-127,42,-59,17,-44,-42,31, 
  /* [1][0][][] */ 71,74,-38,-127,10,-2,-73,98, 
  /* [2][0][][] */ 27,-3,-39,83,28,127,43,73, 
  /* [3][0][][] */ 73,64,-88,127,-89,-12,10,16, 
  /* [4][0][][] */ -34,-105,34,64,-11,43,1,-127, 
  /* [5][0][][] */ 20,4,-30,76,9,-24,55,127, 
  /* [6][0][][] */ 64,-9,-79,-27,127,49,9,6, 
  /* [7][0][][] */ 127,22,21,-21,40,2,78,-63, 
  /* [8][0][][] */ 14,-102,13,107,-1,-2,-26,-127, 
  /* [9][0][][] */ 111,-127,12,-27,2,17,-113,75, 
  /* [10][0][][] */ -92,-72,-127,0,4,10,-84,51, 
  /* [11][0][][] */ -14,-45,-11,-110,-127,-22,47,-20, 
  /* [12][0][][] */ 20,22,-52,69,-71,-37,56,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -12,-31,-13,13,48,127,37,39, 
  /* [15][0][][] */ 81,-8,15,-127,123,78,-80,90, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 18,31,127,13,-31,-8,40,34, 
  /* [18][0][][] */ 87,-127,11,61,-3,-2,-77,24, 
  /* [19][0][][] */ -111,18,84,73,-46,-72,-127,88, 
  /* [20][0][][] */ 34,21,-37,127,-7,-105,13,61, 
  /* [21][0][][] */ 63,31,127,4,-15,1,52,12, 
  /* [22][0][][] */ -68,-16,-127,12,11,12,-96,4, 
  /* [23][0][][] */ -109,102,-18,-34,3,-16,127,-83, 
  /* [24][0][][] */ 10,-58,-55,76,-3,-62,102,127, 
  /* [25][0][][] */ 9,41,29,18,127,112,-59,-46, 
  /* [26][0][][] */ -74,-34,-127,-8,0,5,-112,8, 
  /* [27][0][][] */ 15,2,-44,-4,-67,127,68,56, 
  /* [28][0][][] */ -15,-4,-9,49,3,127,50,43, 
  /* [29][0][][] */ 54,18,127,-11,-32,3,57,-20, 
  /* [30][0][][] */ -77,110,-28,-26,-6,-39,127,-27, 
  /* [31][0][][] */ -39,-90,-19,2,16,-50,127,116, 
  /* [32][0][][] */ 1,-22,-63,127,-42,60,126,121, 
  /* [33][0][][] */ 7,60,-4,-93,0,-20,-5,127, 
  /* [34][0][][] */ 6,59,-10,-76,29,-26,8,127, 
  /* [35][0][][] */ 127,7,-63,-28,62,47,114,-55, 
  /* [36][0][][] */ -127,0,29,60,-56,43,-117,90, 
  /* [37][0][][] */ -2,-30,-18,26,31,127,54,52, 
  /* [38][0][][] */ 14,26,4,87,127,-12,-12,32, 
  /* [39][0][][] */ -11,25,20,-127,24,-3,-25,127, 
  /* [40][0][][] */ 117,25,127,15,4,3,80,-5, 
  /* [41][0][][] */ -2,-19,-22,64,51,127,54,79, 
  /* [42][0][][] */ -75,1,127,30,-10,39,-39,55, 
  /* [43][0][][] */ -9,-68,17,123,-19,-8,22,-127, 
  /* [44][0][][] */ 32,-19,-65,-112,127,-1,-18,-101, 
  /* [45][0][][] */ -93,127,-26,-66,13,1,99,-68, 
  /* [46][0][][] */ -127,-31,49,48,-8,72,-126,73, 
  /* [47][0][][] */ 55,32,88,-11,-3,-46,127,-6, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0013774132821708918, 0.0010412405245006084, 0.00075574102811515331, 0.00067849468905478716, 0.00062252656789496541, 0.00057195808039978147, 0.00083867373177781701, 0.0031043600756675005, 0.00088579865405336022, 0.0047311820089817047, 0.001367338583804667, 0.0037184341344982386, 0.00035425610258243978, 3.937008052901092e-09, 0.0018257349729537964, 0.0001973603357328102, 3.937008052901092e-09, 0.013964265584945679, 0.00073613482527434826, 0.00059206533478572965, 0.00055995461298152804, 0.010631222277879715, 0.00085005757864564657, 0.0027224181685596704, 0.0019241072004660964, 0.0013417663285508752, 0.0056791659444570541, 0.0037964130751788616, 0.00078724272316321731, 0.0041108601726591587, 0.0021916406694799662, 0.00031760041019879282, 0.0003570746339391917, 0.022010890766978264, 0.0011722594499588013, 0.0010740262223407626, 0.0084648383781313896, 0.00064054300310090184, 0.0048957653343677521, 0.00061610160628333688, 0.0029109751340001822, 0.00034684242564253509, 0.00085989240324124694, 0.018739694729447365, 0.00083419767906889319, 0.00085265748202800751, 0.00041848281398415565, 0.00052688689902424812, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -5524, -35371, -6975, -15208, -32763, -1879, -22462, -30470, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0021405762527137995, 0.0017239114968106151, 0.0024719804059714079, 0.0011260194005444646, 0.0013260584091767669, 0.0019725202582776546, 0.0013728792546316981, 0.0010409563547000289, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-19,5,-2,127,-2,7,2,-2,-120,-83,-4,0,116,0,0, 
  /* [1][0][][] */ 0,-23,-1,82,63,5,17,1,0,-15,127,-50,0,24,-24,0, 
  /* [2][0][][] */ 0,-8,-7,-10,-62,8,11,-1,1,6,-14,1,0,127,-6,0, 
  /* [3][0][][] */ 0,-1,-12,-127,79,25,66,12,-2,61,4,39,0,2,21,0, 
  /* [4][0][][] */ 0,44,-26,32,-57,39,127,8,2,-58,19,-10,0,-6,25,0, 
  /* [5][0][][] */ 0,-11,-7,0,-22,-21,-15,10,0,9,-4,-47,0,-7,127,0, 
  /* [6][0][][] */ 0,21,3,6,47,-29,-40,-8,1,-119,124,61,0,127,64,0, 
  /* [7][0][][] */ 0,26,-8,127,14,-1,10,17,-1,61,-51,70,0,-9,52,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.090974487364292145, 0.07326623797416687, 0.10505916178226471, 0.04785582423210144, 0.056357480585575104, 0.083832107484340668, 0.058347366750240326, 0.044240646064281464, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 28883, 10973, 10997, 10756, 84421, 13246, 112105, -7201, 6614, 29936, 13659, -445, 26156, 11595, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 8.9238979853689671e-05, 0.00036474710213951766, 0.0003103074268437922, 0.00015460957365576178, 3.9467166061513126e-05, 0.00035209304769523442, 3.4816417610272765e-05, 2.1840547560714185e-05, 0.00027303447131998837, 0.00018899331917054951, 0.00073308264836668968, 0.00072724185883998871, 0.00024403478892054409, 0.00017874363402370363, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-82,-126,39,-67,80,-75,-89,-3,-8,30,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-84,127,-127,50,-105,5,127,-25, 24,-25,89,-2,-71,65,-93,79,-95,-27,4,-14,61,2,-101,-29, 
  /* [0][1][][] */ -127,127,-23,14,-43,15,-27,15,-27,0,3,-106,-49,8,-29,-14, -78,-41,-58,-14,-7,-26,9,-27,-107,-89,20,-12,-104,-127,1,23, 14,1,63,2,3,32,-24,35,-127,6,-1,3,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,67,2,-6,38,-38,53,-75,0,0,3,40,2,-26,23, 23,-4,30,-1,-26,39,-33,22,-124,-13,0,82,-58,0,-28,-111, 21,-7,18,0,5,13,10,23,-115,4,0,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0037926565855741501, 0.015501751564443111, 0.013188065029680729, 0.0065709068439900875, 0.0016773544484749436, 0.01496395468711853, 0.0014796976465731859, 0.00092822324950248003, 0.011603964492678642, 0.0080322157591581345, 0.031156012788414955, 0.030907778069376945, 0.010371478274464607, 0.0075966045260429382, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 8165, -141041, 3117, 212796, 30912, 46816, 35128, -191742, 12601, 29147, 252841, -1073741824, 49032, 57945, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00023685877386014909, 0.00015559757594019175, 3.4216722269775346e-05, 1.2672086995735299e-05, 0.0002155190595658496, 6.9758811150677502e-05, 0.00021844550792593509, 8.3618942881003022e-06, 5.6059750932035968e-05, 0.00010146036220248789, 1.9503700968925841e-05, 1.1533876076441629e-09, 7.9687924881000072e-05, 4.8624231567373499e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 65,15,42, 11,-4,23, -127,-118,-80, 
  /* [1][1][][] */ 17,6,2, -8,15,-2, 2,-36,-5, 
  /* [1][2][][] */ 6,20,-5, 6,11,-2, 35,-32,-1, 
  /* [2][0][][] */ 29,-9,-4, 79,116,4, 54,-31,15, 
  /* [2][1][][] */ 9,15,2, 64,127,-24, 41,9,6, 
  /* [2][2][][] */ 53,-63,25, 76,-45,-16, 40,-45,30, 
  /* [3][0][][] */ 4,25,-6, 31,84,11, 12,16,0, 
  /* [3][1][][] */ 31,41,12, 75,127,29, -4,-13,3, 
  /* [3][2][][] */ 11,7,6, 37,33,11, 11,2,5, 
  /* [4][0][][] */ 40,54,-31, 13,60,-32, 5,16,0, 
  /* [4][1][][] */ 27,48,15, 8,68,6, 33,44,-8, 
  /* [4][2][][] */ 84,97,42, 66,127,26, 12,43,47, 
  /* [5][0][][] */ 12,14,-127, 1,16,-105, -9,30,-37, 
  /* [5][1][][] */ 10,-24,-118, 3,-25,-101, -3,15,-31, 
  /* [5][2][][] */ 2,18,-14, 3,6,-10, -5,9,-19, 
  /* [6][0][][] */ 24,-63,34, 45,-88,38, 12,-18,11, 
  /* [6][1][][] */ 37,-95,61, 64,-127,71, 10,-27,17, 
  /* [6][2][][] */ 24,-32,16, 17,-42,28, -10,8,-1, 
  /* [7][0][][] */ -27,-6,-11, -108,-64,-11, -12,12,-7, 
  /* [7][1][][] */ -6,-31,-15, -127,-124,-20, 5,-21,-3, 
  /* [7][2][][] */ -3,25,-19, 16,6,-6, 4,23,-7, 
  /* [8][0][][] */ 87,49,35, 91,54,37, 127,80,65, 
  /* [8][1][][] */ 82,46,34, 84,49,35, 116,68,60, 
  /* [8][2][][] */ 65,30,21, 68,33,21, 98,49,46, 
  /* [9][0][][] */ -25,-5,15, -18,-12,0, 2,5,-8, 
  /* [9][1][][] */ 97,113,-3, 74,127,15, -4,27,27, 
  /* [9][2][][] */ -29,-28,11, 2,-29,-1, 5,0,-26, 
  /* [10][0][][] */ -25,-84,-17, 34,95,22, -9,-13,-1, 
  /* [10][1][][] */ -60,-104,-12, 79,127,16, -17,-27,1, 
  /* [10][2][][] */ -32,-20,3, 36,22,-9, -9,-1,9, 
  /* [11][0][][] */ 13,-5,15, 34,-19,22, 26,-68,-28, 
  /* [11][1][][] */ -10,-13,4, -3,-34,-13, 6,-33,-29, 
  /* [11][2][][] */ 21,-12,-49, 127,127,70, -9,30,-24, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -50,-96,-17, -60,-110,-25, -11,-19,-8, 
  /* [13][1][][] */ 62,114,15, 58,127,25, 6,14,9, 
  /* [13][2][][] */ -8,-19,3, 2,-18,-2, -1,2,-6, 
  /* [14][0][][] */ 50,-1,-31, 80,-24,-47, 23,-18,-29, 
  /* [14][1][][] */ 94,-10,-66, 127,-37,-84, 46,-30,-48, 
  /* [14][2][][] */ 51,-10,-47, 68,-23,-53, 6,-24,-35, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.06039898470044136, 0.039677377790212631, 0.0087252641096711159, 0.0032313819974660873, 0.054957356303930283, 0.017788495868444443, 0.055703602731227875, 0.0021322828251868486, 0.014295235276222229, 0.02587239071726799, 0.0049734432250261307, 2.9411381774480105e-07, 0.02032041922211647, 0.012399177998304367, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.53961598873138428, } };
const TfArray<1, int> quant46_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.4097239077091217, } };
const TfArray<1, int> quant50_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.45953205227851868, } };
const TfArray<1, int> quant53_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.59272480010986328, } };
const TfArray<1, int> quant54_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.268381267786026, } };
const TfArray<1, int> quant58_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.26515144109725952, } };
const TfArray<1, int> quant61_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.31217044591903687, } };
const TfArray<1, int> quant62_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.25616714358329773, } };
const TfArray<1, int> quant65_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.37504714727401733, } };
const TfArray<1, int> quant66_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.076539330184459686, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,7 } };
const TfArray<1, float> quant69_scale = { 1, { 0.16262944042682648, } };
const TfArray<1, int> quant69_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,7 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 28, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension69, 1008, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 1008, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_4_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
